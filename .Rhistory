maturity_table$Species <- gsub(" ", "", maturity_table$Species)
maturity_table$Species <- as.character(maturity_table$Species)
maturity_table$SEX <- as.character(maturity_table$SEX)
maturity_table$smallest_mature_individual_observed <- suppressWarnings(
as.numeric(maturity_table$smallest_mature_individual_observed)
)
species_list <- DataTargetSpecies
species_list
species_list <- DataTargetSpecies
species_list$FAUNISTIC_CATEGORY <- as.character(species_list$FAUNISTIC_CATEGORY)
species_list$SPECIES <- as.character(species_list$SPECIES)
(species in unique(ResultDataTC$Species))
unique(ResultDataTC$Species)
ResultData_temp <- ResultDataTC[ResultDataTC$Species == species, ]
# Determine faunistic category
cau_fau_temp <- species_list$FAUNISTIC_CATEGORY[
paste0(
substring(species_list$SPECIES, 1, 4),
substring(species_list$SPECIES, 5, 7)
) == species
]
cau_fau_temp
ResultDataTA
ResultDataTC
Maturity_parameters
DataTargetSpecies
Format <- "from_2012"
if (!file.exists(file.path(wd, "Logfiles"))) {
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")) {
suffix <- paste(as.character(Sys.Date()), format(Sys.time(), "_time_h%Hm%Ms%OS0"), sep = "")
}
numberError <- 0
Errors <- file.path(wd, "Logfiles", paste("Logfile_", suffix, ".dat", sep = ""))
if (!file.exists(Errors)) {
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultDataTA <- ResultDataTA[ResultDataTA$YEAR == year, ]
ResultDataTC <- ResultDataTC[ResultDataTC$YEAR == year, ]
if (nrow(ResultDataTC) == 0) {
write("Empty TC data frame for the selected year.", file = Errors, append = TRUE)
return(TRUE)
}
(nrow(ResultDataTC) == 0)
write(
paste("\n----------- check consistency of maturity stages in",
ResultDataTC$TYPE_OF_FILE[1],
"by means of spawning season information -",
year),
file = Errors,
append = TRUE
)
ResultDataTC$Species <- paste(ResultDataTC$GENUS, ResultDataTC$SPECIES, sep = "")
ResultDataTC$Species
ResultDataTC$Maturity <- paste(
as.character(ResultDataTC$MATURITY),
ifelse(is.na(ResultDataTC$MATSUB), "", as.character(ResultDataTC$MATSUB)),
sep = ""
)
maturity_table <- Maturity_parameters
species_list <- DataTargetSpecies
maturity_table$Species
maturity_table$Species <- gsub(" ", "", maturity_table$Species)
species_list <- DataTargetSpecies
unique(ResultDataTC$Species)
i=1
ResultData_temp <- ResultDataTC[ResultDataTC$Species == i, ]
ResultData_temp
ResultDataTC
i="BOOPBOO"
ResultDataTC[ResultDataTC$Species == i, ]
ResultData_temp <- ResultDataTC[ResultDataTC$Species == i, ]
cau_fau_temp <- species_list$FAUNISTIC_CATEGORY[
paste0(
substring(species_list$SPECIES, 1, 4),
substring(species_list$SPECIES, 5, 7)
) == i
]
cau_fau_temp
species_list$SPECIES
cau_fau_temp <- species_list$FAUNISTIC_CATEGORY[
paste0(
substring(species_list$SPECIES, 1, 4),
substring(species_list$SPECIES, 5, 7)
) == i
]
cau_fau_temp
ResultData_temp
j=1
maturity_minitable <- maturity_table[
as.character(maturity_table$Species) == i &
as.character(maturity_table$SEX) == as.character(ResultData_temp$SEX[j]),
]
maturity_minitable
as.character(maturity_table$Species)
as.character(maturity_table$Species) == i
as.character(maturity_table$SEX)
as.character(ResultData_temp$SEX[j])
maturity_minitable <- maturity_table[
as.character(maturity_table$Species) == i &
as.character(maturity_table$SEX) == as.character(ResultData_temp$SEX[j]),
]
maturity_minitable
# Extract month from TA
month <- ResultDataTA[
ResultDataTA$HAUL_NUMBER == ResultData_temp$HAUL_NUMBER[j],
"MONTH"
]
(nrow(maturity_minitable) != 0)
maturity_minitable$Start_reproductive_season[1]
unique(ResultDataTC$Species)
i="MERLMER"
ResultData_temp <- ResultDataTC[ResultDataTC$Species == i, ]
cau_fau_temp <- species_list$FAUNISTIC_CATEGORY[
paste0(
substring(species_list$SPECIES, 1, 4),
substring(species_list$SPECIES, 5, 7)
) == i
]
ResultData_temp
cau_fau_temp
j=1
maturity_minitable <- maturity_table[
as.character(maturity_table$Species) == i &
as.character(maturity_table$SEX) == as.character(ResultData_temp$SEX[j]),
]
maturity_minitable
# Extract month from TA
month <- ResultDataTA[
ResultDataTA$HAUL_NUMBER == ResultData_temp$HAUL_NUMBER[j],
"MONTH"
]
month
(nrow(maturity_minitable) != 0)
Start <- maturity_minitable$Start_reproductive_season[1]
End <- maturity_minitable$End_reproductive_season[1]
Start
End <- maturity_minitable$End_reproductive_season[1]
End
(!is.na(Start) && !is.na(End))
maturity_minitable$max_L50[1]
# Check max_L50
max_L50_value <- maturity_minitable$max_L50[1]
(!is.na(max_L50_value))
threshold <- (max_L50_value + 0.2 * max_L50_value) * 10
threshold
(Start < End)
(
(
(as.character(ResultData_temp$Maturity[j]) == "0" & as.character(ResultData_temp$SEX[j]) != "M") |
as.character(ResultData_temp$Maturity[j]) == "1" |
as.character(ResultData_temp$Maturity[j]) == "2A"
) &
all(month >= Start) &
all(month <= End) &
ResultData_temp$LENGTH_CLASS[j] > threshold
)
(
(
(as.character(ResultData_temp$Maturity[j]) == "0" & as.character(ResultData_temp$SEX[j]) != "M") |
as.character(ResultData_temp$Maturity[j]) == "1" |
as.character(ResultData_temp$Maturity[j]) == "2A"
) &
(all(month >= Start) | all(month <= End)) &
ResultData_temp$LENGTH_CLASS[j] > threshold
)
max_L50_value
sort(unique(species_list$FAUNISTIC_CATEGORY))
source("~/GitHub/RoME/R/check_spawning_period.r")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
source("~/GitHub/RoME/R/check_spawning_period.r")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
source("~/GitHub/RoME/R/check_spawning_period.r")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
source("~/GitHub/RoME/R/check_spawning_period.r")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
ResultDataTC[ResultDataTC$HAUL_NUMBER==135 & ResultDataTC$GENUS=="LOLI",]
Maturity_parameters[Maturity_parameters$Species=="LOLI VUL",]
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
year=2023
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
source("~/GitHub/RoME/R/check_spawning_period.r")
detach("package:RoME", unload = TRUE)
remove.packages("RoME")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
year=2022
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
ResultDataTC = read.table("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/______ MEDITS DATA __OFFICIAL___/MEDBSsurvey/Demersal/TC_MEDITS_FORMAT_2025.csv",sep=";",header=TRUE)
ResultDataTA = read.table("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/______ MEDITS DATA __OFFICIAL___/MEDBSsurvey/Demersal/TA_MEDITS_FORMAT_2025.csv",sep=";",header=TRUE)
ResultDataTC <- ResultDataTC[ResultDataTC$AREA == 18, ]
ResultDataTA <- ResultDataTA[ResultDataTA$AREA == 18, ]
year=2022
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
ResultDataTC
# Safety
if (!file.exists(file.path(wd, "Logfiles"))) {
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")) {
suffix <- paste(as.character(Sys.Date()), format(Sys.time(), "_time_h%Hm%Ms%OS0"), sep = "")
}
numberError <- 0
# Logfile
Errors <- file.path(wd, "Logfiles", paste("Logfile_", suffix, ".dat", sep = ""))
if (!file.exists(Errors)) {
file.create(Errors)
}
# CSV output
ErrorsCSV <- file.path(
wd, "Logfiles",
paste("Check_SpawningPeriod_Logfile_GSA", unique(ResultDataTC$AREA)[1], "_Year", year, "_", suffix, ".csv", sep = "")
)
csv_header <- data.frame(
GSA = integer(),
Year = integer(),
Haul = integer(),
Species = character(),
Sex = character(),
Length_Class_mm = numeric(),
Maturity_Stage = character(),
Start_Spawning_Month = integer(),
End_Spawning_Month = integer(),
Month_of_Catch = integer(),
Threshold_mm = numeric(),
Warning_Type = character(),
stringsAsFactors = FALSE
)
write.table(
csv_header,
file = ErrorsCSV,
sep = ";",
row.names = FALSE,
col.names = TRUE
)
# Filter year
ResultDataTA <- ResultDataTA[ResultDataTA$YEAR == year, ]
ResultDataTC <- ResultDataTC[ResultDataTC$YEAR == year, ]
ResultDataTA[ResultDataTA$YEAR == year, ]
ResultDataTC = read.table("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/______ MEDITS DATA __OFFICIAL___/MEDBSsurvey/Demersal/TC_MEDITS_FORMAT_2025.csv",sep=";",header=TRUE)
unique(ResultDataTC$YEAR)
# Safety
if (!file.exists(file.path(wd, "Logfiles"))) {
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")) {
suffix <- paste(as.character(Sys.Date()), format(Sys.time(), "_time_h%Hm%Ms%OS0"), sep = "")
}
numberError <- 0
# Logfile
Errors <- file.path(wd, "Logfiles", paste("Logfile_", suffix, ".dat", sep = ""))
if (!file.exists(Errors)) {
file.create(Errors)
}
# CSV output
ErrorsCSV <- file.path(
wd, "Logfiles",
paste("Check_SpawningPeriod_Logfile_GSA", unique(ResultDataTC$AREA)[1], "_Year", year, "_", suffix, ".csv", sep = "")
)
csv_header <- data.frame(
GSA = integer(),
Year = integer(),
Haul = integer(),
Species = character(),
Sex = character(),
Length_Class_mm = numeric(),
Maturity_Stage = character(),
Start_Spawning_Month = integer(),
End_Spawning_Month = integer(),
Month_of_Catch = integer(),
Threshold_mm = numeric(),
Warning_Type = character(),
stringsAsFactors = FALSE
)
write.table(
csv_header,
file = ErrorsCSV,
sep = ";",
row.names = FALSE,
col.names = TRUE
)
ResultDataTA
ResultDataTA = read.table("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/______ MEDITS DATA __OFFICIAL___/MEDBSsurvey/Demersal/TA_MEDITS_FORMAT_2025.csv",sep=";",header=TRUE)
ResultDataTA
unique(ResultDataTA$YEAR)
ResultDataTA$AREA
unique(ResultDataTA$AREA)
ResultDataTA <- ResultDataTA[ResultDataTA$AREA == 18, ]
ResultDataTA
ResultDataTA[ResultDataTA$YEAR == year, ]
year
ResultDataTA$YEAR
class(ResultDataTA$YEAR)
year
unique(ResultDataTA$YEAR)
year=2023
ResultDataTA[ResultDataTA$YEAR == year, ]
ResultDataTC[ResultDataTC$YEAR == year, ]
source("~/GitHub/RoME/R/check_spawning_period.r")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//DataTargetSpecies.rda")
# load("C:/Users/Bitetto Isabella/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/Rome/ROME//RoME//data//Maturity_parameters.rda")
check_spawning_period(ResultDataTA,ResultDataTC,year,Maturity_parameters=Maturity_parameters,DataTargetSpecies=DataTargetSpecies,wd,suffix)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/______ MEDITS DATA __OFFICIAL___/MEDBSsurvey/Demersal"
GSA <- 18
years <- 2023 #sort(unique(ta$YEAR))  #c(2017,2018)
# # load TX tables for a unique GSA per time
wd <- "D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(ta)
tb <- read.table(file=paste(filedir, "\\TB_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(tb)
tc <- read.table(file=paste(filedir, "\\TC_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(tc)
tc$TYPE_OF_FILE ="TC"
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
tb$TOTAL_WEIGHT_IN_THE_HAUL  <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION  <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED    <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED )
tc$LENGTH_CLASS  <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE    <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
checkHeader(ta,"TA",wd=wd,suffix=suffix)
checkHeader(tb,"TB",wd=wd,suffix=suffix)
checkHeader(tc,"TC",wd=wd,suffix=suffix)
# colnames(ta) <- colnames(RoME::TA)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# ta$BOTTOM_SALINITY_BEGINNING <- 15
# ta$BOTTOM_SALINITY_END <- 15
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=TRUE
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
devtools::document()
rm(list = c("check_area",
"check_individual_weightTE",
"check_spawning_period",
"check_species_TBTC"))
rm(list = ls())
devtools::load_all()
devtools::document()
head( DataTargetSpecies)
codetools::findGlobals(check_0_fieldsTA)
codetools::findGlobals(check_area)
codetools::findGlobals(check_associations_category_TL)
codetools::findGlobals(check_bridles_length)
codetools::findGlobals(check_class)
codetools::findGlobals(check_consistencyTA_distance)
codetools::findGlobals(check_consistencyTA_duration)
codetools::findGlobals(check_date_haul)
codetools::findGlobals(check_depth)
codetools::findGlobals(check_dictionary)
codetools::findGlobals(check_distance)
codetools::findGlobals(check_dm)
codetools::findGlobals(check_G1_G2)
codetools::findGlobals(check_haul_species_TCTB)
codetools::findGlobals(check_hauls_TATB)
codetools::findGlobals(check_hauls_TATL)
codetools::findGlobals(check_hauls_TBTA)
codetools::findGlobals(check_hauls_TLTA)
codetools::findGlobals(check_identical_records)
codetools::findGlobals(check_individual_weightTC)
codetools::findGlobals(check_individual_weightTE)
codetools::findGlobals(check_length_class_codeTC)
codetools::findGlobals(check_length)
codetools::findGlobals(check_mat_stages)
codetools::findGlobals(check_nb_per_sexTC)
codetools::findGlobals(check_nb_TE)
codetools::findGlobals(check_nbtotTB)
codetools::findGlobals(check_nm_TB)
codetools::findGlobals(check_no_empty_fields)
codetools::findGlobals(check_numeric_range)
codetools::findGlobals(check_position_in_Med)
codetools::findGlobals(check_position)
codetools::findGlobals(check_quadrant)
codetools::findGlobals(check_quasiidentical_records)
codetools::findGlobals(check_raising)
codetools::findGlobals(check_rubincode)
codetools::findGlobals(check_smallest_mature)
codetools::findGlobals(check_spawning_period)
# install.packages("codetools")  # se non l'hai già
library(codetools)
# 1) Prendi tutti i file R/ del pacchetto
r_files <- list.files("R", pattern="\\.R$", full.names = TRUE)
# 2) Fonte di tutto il pacchetto in un namespace temporaneo
devtools::load_all()
# 3) Trova tutte le funzioni esportate
exports <- getNamespaceExports("RoME")
# 4) Per ciascuna funzione, estrai i globali
all_globals <- lapply(exports, function(fn_name) {
fn <- get(fn_name, envir = asNamespace("RoME"))
globals <- findGlobals(fn, merge = FALSE)$functions
data.frame(fun = fn_name, global = globals, stringsAsFactors=FALSE)
})
df <- do.call(rbind, all_globals)
# 5) Definisci i nomi base R (fonte: help("base-package"))
base_funs <- ls(getNamespace("base"))
# 6) Filtro: rimangono solo i globali non-base e non interni al pacchetto
externals <- subset(df,
! global %in% base_funs &            # non base R
! global %in% exports &              # non funzioni del pacchetto
! grepl("^[[:punct:][:digit:]]", global) # scarta simboli interni
)
# 7) Ordino e stampo univoci
cat(sort(unique(externals$global)), sep = "\n")
devtools::document()
devtools::document()
devtools::document()
ls(rm())
devtools::document()
devtools::document()
devtools::check(document = FALSE)
library(sf)
data(MedSea)
plot(sf::st_geometry(MedSea))
plot(MedSea)
class(plot(MedSea))
class((MedSea))
library(sp)
plot(MedSea)
library(sp)
data(MedSea)
plot(MedSea)
wd <- tempdir()
suffix="2020-03-05_time_h17m44s55"
year=2007
check_position(RoME::TA,year,wd,suffix)
packageVersion("ggplot2")
library(rnaturalearthdata)
remove.packages("RoME")
