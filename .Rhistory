stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check consistency between duration and time TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_consistencyTA_duration(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check consistency between distance and duration of the haul TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_consistencyTA_distance(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check consistency of the hauls coordinates with the distance (difference not greater than 30%)"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_distance(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check consistency of bridles length TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_bridles_length(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check difference between start depth and end depth (not greater than 20%) in TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_depth(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check start depth and end depth in the same stratum TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_stratum(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check consistency of stratum code in TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_stratum_code(ResultDataTA, year = yea, Strata = Stratification, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check start quadrant and end quadrant TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_quadrant(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check uniqueness of valid hauls TA"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_unique_valid_haul(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Visual check of the haul positions"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_position(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Relation between shooting depth and warp length, and between warp length and wing opening"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
graphs_TA(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check if the coordinates are in the Mediterranean Sea"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_position_in_Med(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check on temperature by haul"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_temperature(ResultDataTA, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check correctness of species codes TB"
(check_without_errors == TRUE)
(verbose)
print(paste(checkName, "in progress..."), quote = FALSE)
check_without_errors <- check_rubincode(ResultDataTB, year = yea, TM_list = TM_list, wd, suffix)
check_without_errors
check_rubincode(ResultDataTB, year = yea, TM_list = TM_list, wd, suffix)
checkName <- "Check correctness of species codes TB"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_rubincode(ResultDataTB, year = yea, TM_list = TM_list, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
checkName <- "Check consistency of NB_TOTAL and number per sex TB"
if (check_without_errors == TRUE) {
if (verbose) {
print(paste(checkName, "in progress..."), quote = FALSE)
}
check_without_errors <- check_nbtotTB(ResultDataTB, year = yea, wd, suffix)
}
if (verbose) {
stop_ <- printError(checkName, check_without_errors, stop_)
}
ResultDataTB
check_rubincode(ResultDataTB, year = yea, TM_list = TM_list, wd, suffix)
ResultData = RoME::TB[RoME::TB$YEAR==2012 ,]
# ResultData$SPECIES[28]  <- "ZZZ"
wd <- tempdir()
suffix= NA
year=2012
check_rubincode(ResultData,year,TM_list=TM_list,wd,suffix)
source("~/GitHub/RoME/R/RoME.r", echo=TRUE)
source("~/GitHub/RoME/R/RoME.r", echo=TRUE)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\RoME_RDBFIS\\check_RoME\\files_to_checks" # tempdir()
suffix <- NA
TA <- DataTA # read.table(file = paste(wd, "\\TA.csv", sep = ""), sep = ";", header = T) # RoME::TA
TB <- DataTB # read.table(file = paste(wd, "\\TB.csv", sep = ""), sep = ";", header = T) # RoME::TB
TC <- DataTC # read.table(file = paste(wd, "\\TC.csv", sep = ""), sep = ";", header = T) # RoME::TC
TE <- NA # read.table(file=paste(wd, "\\TE.csv",sep=""), sep=";", header=T)
TL <- NA # read.table(file=paste(wd, "\\TL.csv",sep=""), sep=";", header=T) # RoME::TL
verbose <- TRUE
create_RSufi_files <- TRUE
create_global_RSufi_files <- TRUE
Year_start <- 2012
Year_end <- 2012
RoME(TA = DataTA, TB = DataTB, TC = DataTC, TE = TE, TL = TL, wd = wd, suffix = NA, create_RSufi_files = TRUE, create_global_RSufi_files = TRUE, Year_start = 1994, Year_end = 2020, verbose = TRUE)
source("~/GitHub/RoME/R/check_rubincode.r", echo=TRUE)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
wd
suffix
library(RoME)
library(RoME)
?RoME
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoME::Maturity_parameters
library(RoME)
wd <- tempdir()
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoME::DataTargetSpecies
source("~/GitHub/RoME/R/check_smallest_mature.r", echo=TRUE)
library(RoME)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
check_smallest_mature
source("~/GitHub/RoME/R/RoME.r", echo=TRUE)
library(RoME)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
TargetSpecies
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
par(
)
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
par()
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
?par
library(RoME)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
check_smallest_mature(ResultData,year,MaturityParameters=Maturity_parameters,TargetSpecies=DataTargetSpecies,wd,suffix)
ResultData = DataTC # tc # RoME::TC
year=2015
wd <- tempdir()
suffix=NA
check_smallest_mature(ResultData,year,MaturityParameters=Maturity_parameters,TargetSpecies=DataTargetSpecies,wd,suffix)
ResultData = DataTC # tc # RoME::TC
year=2015
wd <- tempdir()
suffix=NA
check_smallest_mature(ResultData,year,MaturityParameters=Maturity_parameters,TargetSpecies=DataTargetSpecies,wd,suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2015 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2015 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2015 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoME::Maturity_parameters
library(RoME)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
maturity_table
species_list
source("~/GitHub/RoME/R/check_smallest_mature.r", echo=TRUE)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
ResultData = DataTC # tc # RoME::TC
year=2012
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultData <- ResultData[ResultData$YEAR == year, ]
########################################
ResultData <- ResultData[!is.na(ResultData$LENGTH_CLASS),]
write(paste("\n----------- check consistency of maturity stages", ResultData$TYPE_OF_FILE[1]," by means of the comparison with the lenght of smallest mature individuals in bibliography - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData$Species = paste(ResultData$GENUS,ResultData$SPECIES)
ResultData$Maturity = paste(as.character(ResultData$MATURITY),ifelse(is.na(ResultData$MATSUB),"",as.character(ResultData$MATSUB)), sep="")
maturity_table = MaturityParameters
species_list = TargetSpecies
ResultData = DataTC # tc # RoME::TC
year=2012
MaturityParameters=RoME::Maturity_parameters
TargetSpecies=RoME::DataTargetSpecies
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultData <- ResultData[ResultData$YEAR == year, ]
########################################
ResultData <- ResultData[!is.na(ResultData$LENGTH_CLASS),]
write(paste("\n----------- check consistency of maturity stages", ResultData$TYPE_OF_FILE[1]," by means of the comparison with the lenght of smallest mature individuals in bibliography - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData$Species = paste(ResultData$GENUS,ResultData$SPECIES)
ResultData$Maturity = paste(as.character(ResultData$MATURITY),ifelse(is.na(ResultData$MATSUB),"",as.character(ResultData$MATSUB)), sep="")
maturity_table = MaturityParameters
species_list = TargetSpecies
mat_lmin = maturity_table[as.character(maturity_table$smallest_mature_individual_observed)!="n.a.",]
mat_lmin$Species <- as.character(mat_lmin$Species)
species_list$FAUNISTIC_CATEGORY <- as.character(species_list$FAUNISTIC_CATEGORY)
i <- "MULL BAR"
for (i in unique(mat_lmin$Species)){
cau_fau_temp =  species_list$FAUNISTIC_CATEGORY[paste(substring(species_list$SPECIES,1,4),substring(species_list$SPECIES,5,7)) == i]
mat_lmin_temp = mat_lmin[mat_lmin$Species == i,]
for (j in 1:nrow(mat_lmin_temp)) {
Error_matrix = matrix(nrow=0, ncol=ncol(ResultData))
if (as.character(mat_lmin_temp$SEX[j]) == "C"){
ResultData_temp = ResultData[as.character(ResultData$Species) == as.character(mat_lmin_temp$Species[j]),]
mat_lmin_temp_sex = mat_lmin_temp[mat_lmin_temp$SEX == "C",]
} else {
ResultData_temp = ResultData[as.character(ResultData$Species) == as.character(mat_lmin_temp$Species[j]) & as.character(ResultData$SEX) == as.character(mat_lmin_temp$SEX[j]),]
mat_lmin_temp_sex = mat_lmin_temp[mat_lmin_temp$SEX == mat_lmin_temp$SEX[j],]
}
if ((as.character(cau_fau_temp)== "A"|(as.character(cau_fau_temp)== "Ao")) & as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1])!="n.a.") {
Error_matrix = ResultData_temp[((as.character(ResultData_temp$Maturity) != "0")|(as.character(ResultData_temp$Maturity) != "1")|(as.character(ResultData_temp$Maturity) != "2A")) & as.numeric(as.character(ResultData_temp$LENGTH_CLASS)) < as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))-0.1*as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))*10,]
} else if (as.character(cau_fau_temp)== "B"& as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1])!="n.a."){
Error_matrix = ResultData_temp[((as.character(ResultData_temp$Maturity) != "0" )| (as.character(ResultData_temp$Maturity) != "1")|(as.character(ResultData_temp$Maturity) != "2A")) & as.numeric(as.character(ResultData_temp$LENGTH_CLASS)) < as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))-0.1*as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))*10,]
} else if ( as.character(cau_fau_temp)== "C"& as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1])!="n.a.") {
Error_matrix = ResultData_temp[((as.character(ResultData_temp$Maturity) != "0" )| (as.character(ResultData_temp$Maturity) != "1")|(as.character(ResultData_temp$Maturity) != "2A"))& as.numeric(as.character(ResultData_temp$LENGTH_CLASS)) < as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))-0.1*as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))*10,]
} else if (( (as.character(cau_fau_temp)== "S")|(as.character(cau_fau_temp)== "Ae")) & as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1])!="n.a.") {
Error_matrix = ResultData_temp[(as.character(ResultData_temp$Maturity) != "0" |as.character(ResultData_temp$Maturity) != "1") & as.numeric(as.character(ResultData_temp$LENGTH_CLASS)) < as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))-0.1*as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))*10,]
}
if (nrow(Error_matrix)!=0)  {
for (k in 1:nrow(Error_matrix)){
write(paste("Warning: Haul ",Error_matrix$HAUL_NUMBER[k],Error_matrix$Species[k],Error_matrix$SEX[k],"length",Error_matrix$LENGTH_CLASS[k],": specimen mature with size smaller than the smallest size reported in bibliography(",(as.numeric(as.character(mat_lmin_temp_sex$smallest_mature_individual_observed[1]))*10),").Please see Maturity_parameters.csv (folder 'Tables')"), file = Errors, append = TRUE)
print(i)
}
}
}
}
if (numberError ==0) {
write(paste("Attention: if you decide to change the maturity stages detected, after the corrections, run again the code, because you could have entered duplicated records in TC."), file = Errors, append = TRUE)
}
if (file.exists(file.path(tempdir(), "Logfiles"))){
unlink(file.path(tempdir(),"Logfiles"),recursive=T)
}
if (file.exists(file.path(tempdir(), "Graphs"))){
unlink(file.path(tempdir(),"Graphs"),recursive=T)
}
if (file.exists(file.path(tempdir(), "files R-Sufi"))){
unlink(file.path(tempdir(),"files R-Sufi"),recursive=T)
}
if (numberError ==0) {
return(TRUE)
} else { return(FALSE) }
ResultData
year
check_smallest_mature(TC,year,RoME::Maturity_parameters,RoME::DataTargetSpecies,wd,suffix)
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
years
templateTC
library(RoME)
