LW[(LW$SPECIES== paste(TC$GENUS[i],TC$SPECIES[i])) &(as.character(LW$SEX)==as.character(TC$SEX[i])) & (LW$AREA==TC$AREA[1]),]
ab=LW[(LW$SPECIES== paste(TC$GENUS[i],TC$SPECIES[i])) &(as.character(LW$SEX)==as.character(TC$SEX[i])) & (LW$AREA==TC$AREA[1]),]
(nrow(ab)!=0)
A= ab$a[1]
B= ab$b[1]
A
B
(as.character(TC$LENGTH_CLASSES_CODE[i])=="m")
TC$LENGTH_CLASSES_CODE[i]
year
for (i in 1:nrow(TC)){
ab=LW[(LW$SPECIES== paste(TC$GENUS[i],TC$SPECIES[i])) &(as.character(LW$SEX)==as.character(TC$SEX[i])) & (LW$AREA==TC$AREA[1]),]
if (nrow(ab)!=0){
A= ab$a[1]
B= ab$b[1]
if (!TC$LENGTH_CLASSES_CODE[i] %in% c("m","0","1")) {
write(paste("LENGTH_CLASSES_CODE value '",TC$LENGTH_CLASSES_CODE[i],"' not expected in HAUL ",TC$HAUL_NUMBER[i],", ",TC$YEAR[i]), file = Errors, append = TRUE)
numberError=numberError+1
} else if(as.character(TC$LENGTH_CLASSES_CODE[i])=="m"){
mean_length =TC$LENGTH_CLASS[i] +0.5
mean_weight = A*mean_length^B
TC$mean_weight[i] = mean_weight * TC$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE[i]
} else if (as.character(TC$LENGTH_CLASSES_CODE[i])=="0"){ # step: 0.5 cm
mean_length =(TC$LENGTH_CLASS[i] +2.5)/10
mean_weight = A*mean_length^B
TC$mean_weight[i] = mean_weight * TC$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE[i]
} else if (as.character(TC$LENGTH_CLASSES_CODE[i])=="1"){ # step: 1 cm
mean_length =(TC$LENGTH_CLASS[i] +5)/10
mean_weight = A*mean_length^B
TC$mean_weight[i] = mean_weight * TC$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE[i] # estimated weight
}
}
}
TC_w= aggregate(TC$mean_weight, by=list(TC$HAUL_NUMBER,TC$GENUS, TC$SPECIES,TC$WEIGHT_OF_THE_SAMPLE_MEASURED), FUN="sum")
colnames(TC_w) = c("HAUL_NUMBER","GENUS", "SPECIES","WEIGHT_OF_THE_SAMPLE_MEASURED","ESTIMATED_WEIGHT")
TC_w
?aggregate
TC$LENGTH_CLASSES_CODE
TC_w= aggregate(TC$mean_weight, by=list(TC$HAUL_NUMBER,TC$GENUS, TC$SPECIES,TC$WEIGHT_OF_THE_SAMPLE_MEASURED), FUN="sum")
colnames(TC_w) = c("HAUL_NUMBER","GENUS", "SPECIES","WEIGHT_OF_THE_SAMPLE_MEASURED","ESTIMATED_WEIGHT")
TC_w$perc_diff =  (TC_w$WEIGHT_OF_THE_SAMPLE_MEASURED-TC_w$ESTIMATED_WEIGHT)/TC_w$ESTIMATED_WEIGHT*100
for (i in 1:nrow(TC_w)){
if (!is.na(TC_w$perc_diff[i]) & abs(TC_w$perc_diff[i])>50){
# numberError=numberError+1
}
}
if (numberError ==0) {
write(paste("No error occurred"), file = Errors, append = TRUE)
} else {
filename <- paste("Comparison_estimated_observed_weight_in_TC_",  TC$YEAR[1],".csv",sep="")
write.table(TC_w,file=file.path(wd,filename),sep=";",row.names=F)
write("For some hauls the difference between estimated and observed total weight is greater than 50%. Please verify in the file Comparison_estimated_observed_weight_in_TC.csv automatically produced in the working directory", file = Errors, append = TRUE)
}
source("~/GitHub/RoME/R/check_individual_weightTC.r", echo=TRUE)
check_without_errors = check_individual_weightTC(ResultDataTC,LW=ab_parameters,year=yea,wd,suffix, verbose=FALSE)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/B-USEFUL/_DATA_MED_/MED_DATA/R script/01b_check MEDITS data with RoME.r", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/B-USEFUL/_DATA_MED_/MED_DATA/R script/01b_check MEDITS data with RoME.r", echo=TRUE)
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
ta
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 18
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
# definition of default tables and variables used in the analysis
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
# creation of sub-folder for results by GSA
gsa.dir <- file.path(wd, paste0("GSA",GSA))
if (file.exists(gsa.dir)){
print(paste0("The folder '",paste0("GSA",GSA),"' was already created."))
} else {
dir.create(gsa.dir, showWarnings = FALSE)
print(paste0("The folder '",paste0("GSA",GSA),"' has been created."))
}
setwd(gsa.dir)
setwd(gsa.dir)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/B-USEFUL/_DATA_MED_/MED_DATA/R script/01b_check MEDITS data with RoME.r", echo=TRUE)
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 18
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
# definition of default tables and variables used in the analysis
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
# creation of sub-folder for results by GSA
gsa.dir <- file.path(wd, paste0("GSA",GSA))
if (file.exists(gsa.dir)){
print(paste0("The folder '",paste0("GSA",GSA),"' was already created."))
} else {
dir.create(gsa.dir, showWarnings = FALSE)
print(paste0("The folder '",paste0("GSA",GSA),"' has been created."))
}
setwd(gsa.dir)
ta$BOTTOM_TEMPERATURE_BEGINNING <- as.numeric(ta$BOTTOM_TEMPERATURE_BEGINNING)
ta$BOTTOM_TEMPERATURE_END <- as.numeric(ta$BOTTOM_TEMPERATURE_END)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
tb$TOTAL_WEIGHT_IN_THE_HAUL <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED)
tc$LENGTH_CLASS <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE )
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=gsa.dir,
suffix=NA,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 18
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
# definition of default tables and variables used in the analysis
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
# creation of sub-folder for results by GSA
gsa.dir <- file.path(wd, paste0("GSA",GSA))
if (file.exists(gsa.dir)){
print(paste0("The folder '",paste0("GSA",GSA),"' was already created."))
} else {
dir.create(gsa.dir, showWarnings = FALSE)
print(paste0("The folder '",paste0("GSA",GSA),"' has been created."))
}
setwd(gsa.dir)
ta$BOTTOM_TEMPERATURE_BEGINNING <- as.numeric(ta$BOTTOM_TEMPERATURE_BEGINNING)
ta$BOTTOM_TEMPERATURE_END <- as.numeric(ta$BOTTOM_TEMPERATURE_END)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
tb$TOTAL_WEIGHT_IN_THE_HAUL <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED)
tc$LENGTH_CLASS <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE )
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=gsa.dir,
suffix=NA,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
tc
tc$LENGTH_CLASSES_CODE
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 18
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
# definition of default tables and variables used in the analysis
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
# creation of sub-folder for results by GSA
gsa.dir <- file.path(wd, paste0("GSA",GSA))
if (file.exists(gsa.dir)){
print(paste0("The folder '",paste0("GSA",GSA),"' was already created."))
} else {
dir.create(gsa.dir, showWarnings = FALSE)
print(paste0("The folder '",paste0("GSA",GSA),"' has been created."))
}
setwd(gsa.dir)
ta$BOTTOM_TEMPERATURE_BEGINNING <- as.numeric(ta$BOTTOM_TEMPERATURE_BEGINNING)
ta$BOTTOM_TEMPERATURE_END <- as.numeric(ta$BOTTOM_TEMPERATURE_END)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
tb$TOTAL_WEIGHT_IN_THE_HAUL <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED)
tc$LENGTH_CLASS <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE )
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=gsa.dir,
suffix=NA,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 18
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
# definition of default tables and variables used in the analysis
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
# creation of sub-folder for results by GSA
gsa.dir <- file.path(wd, paste0("GSA",GSA))
if (file.exists(gsa.dir)){
print(paste0("The folder '",paste0("GSA",GSA),"' was already created."))
} else {
dir.create(gsa.dir, showWarnings = FALSE)
print(paste0("The folder '",paste0("GSA",GSA),"' has been created."))
}
setwd(gsa.dir)
ta$BOTTOM_TEMPERATURE_BEGINNING <- as.numeric(ta$BOTTOM_TEMPERATURE_BEGINNING)
ta$BOTTOM_TEMPERATURE_END <- as.numeric(ta$BOTTOM_TEMPERATURE_END)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
tb$TOTAL_WEIGHT_IN_THE_HAUL <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED)
tc$LENGTH_CLASS <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE )
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=gsa.dir,
suffix=NA,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 18
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
# definition of default tables and variables used in the analysis
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
# creation of sub-folder for results by GSA
gsa.dir <- file.path(wd, paste0("GSA",GSA))
if (file.exists(gsa.dir)){
print(paste0("The folder '",paste0("GSA",GSA),"' was already created."))
} else {
dir.create(gsa.dir, showWarnings = FALSE)
print(paste0("The folder '",paste0("GSA",GSA),"' has been created."))
}
setwd(gsa.dir)
ta$BOTTOM_TEMPERATURE_BEGINNING <- as.numeric(ta$BOTTOM_TEMPERATURE_BEGINNING)
ta$BOTTOM_TEMPERATURE_END <- as.numeric(ta$BOTTOM_TEMPERATURE_END)
ta$BOTTOM_SALINITY_END <- as.numeric(ta$BOTTOM_SALINITY_END)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
tb$TOTAL_WEIGHT_IN_THE_HAUL <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED)
tc$LENGTH_CLASS <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE )
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=gsa.dir,
suffix=NA,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 18
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
# definition of default tables and variables used in the analysis
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
# creation of sub-folder for results by GSA
gsa.dir <- file.path(wd, paste0("GSA",GSA))
if (file.exists(gsa.dir)){
print(paste0("The folder '",paste0("GSA",GSA),"' was already created."))
} else {
dir.create(gsa.dir, showWarnings = FALSE)
print(paste0("The folder '",paste0("GSA",GSA),"' has been created."))
}
setwd(gsa.dir)
ta$BOTTOM_TEMPERATURE_BEGINNING <- as.numeric(ta$BOTTOM_TEMPERATURE_BEGINNING)
ta$BOTTOM_TEMPERATURE_END <- as.numeric(ta$BOTTOM_TEMPERATURE_END)
ta$BOTTOM_SALINITY_BEGINNING <- as.numeric(ta$BOTTOM_SALINITY_BEGINNING)
ta$BOTTOM_SALINITY_END <- as.numeric(ta$BOTTOM_SALINITY_END)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
tb$TOTAL_WEIGHT_IN_THE_HAUL <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED)
tc$LENGTH_CLASS <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE )
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=gsa.dir,
suffix=NA,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
library(RoME)
