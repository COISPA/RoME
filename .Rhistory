}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Relation between shooting depth and warp length, and between warp length and wing opening"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
graphs_TA(ResultDataTA,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check if the coordinates are in the Mediterranean or Black Sea"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_position_in_Med(ResultDataTA,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check on temperature by haul"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_temperature(ResultDataTA,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# checks on TB
table <- "TB"
checkName = "Check correctness of species codes TB"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_rubincode(ResultDataTB,year=yea,TMlist=Ref_list,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency of NB_TOTAL and number per sex TB"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_nbtotTB(ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check presence of NB_TOTAL and number per sex TB for species G1"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_nm_TB(ResultDataTB, year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency between not null weight and not null total number"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_weight_tot_nb(ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency of weight and number TB"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_weight(ResultDataTB,year=yea,DataTargetSpecies=RoME::DataTargetSpecies,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
graphics.off()
# checks on TC
table <- "TC"
checkName = "Check correctness of species codes TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_rubincode(ResultDataTC,year=yea,TMlist=Ref_list,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of LENGTH_CLASSES_CODE TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_length_class_codeTC(ResultDataTC,Specieslist=Ref_list,year=yea, wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency of length classes TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_length(ResultDataTC,DataSpecies=NA,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of number per sex in TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_nb_per_sexTC(ResultDataTC,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency of maturity stages TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_mat_stages(ResultDataTC,year=yea, wd, suffix, stages=stages_list)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check sub-sampling"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_subsampling(ResultDataTC,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency of maturity stages TC by the comparison with the length of smallest mature individuals reported in bibliography"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_smallest_mature(ResultDataTC,year=yea,MaturityParameters=Maturity,TargetSpecies=DataTargetSpecies,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# checkName = "Check consistency of sex TC by means of spawning period"
# if (check_without_errors == TRUE) {
#   if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
#   check_without_errors = check_spawning_period(ResultDataTA,ResultDataTC,year=yea,Maturity_parameters=Maturity,DataTargetSpecies=DataTargetSpecies,wd,suffix)
# }
#   if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
# check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
# check.df <- check.list[[1]]
# check_without_errors <- check.list[[2]]
# check_without_warnings <- check.list[[3]]
# checkName = "Check consistency of sex data TC by means of sex-inversion size"
# if (check_without_errors == TRUE) {
#   if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
#   check_without_errors = check_sex_inversion(ResultDataTC,Maturity_parameters,wd,suffix)
# }
#   if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
# check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
# check.df <- check.list[[1]]
# check_without_errors <- check.list[[2]]
# check_without_warnings <- check.list[[3]]
checkName = "Check consistency of length distribution TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_step_length_distr(ResultDataTC,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check total weight in the haul in TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_individual_weightTC(ResultDataTC,LW=ab_parameters,year=yea,wd,suffix, verbose=FALSE)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of species codes TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_rubincode(ResultDataTC,year=yea,TMlist=Ref_list,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check presence of lengths for G1 and G2 Medits species in TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_G1_G2(ResultDataTC, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# cross checks
table <- "TB-TA"
checkName = "Check presence in TB of TA hauls"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TATB(ResultDataTA,ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TB"
checkName = "Check presence in TA of TB hauls"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TBTA(ResultDataTA,ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC-TB"
checkName = "Check presence in TC of TB target species"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_species_TBTC(ResultDataTB,ResultDataTC,year=yea,DataSpecies=DataTargetSpecies,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TB-TC"
checkName = "Check presence in TB of TC species"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_haul_species_TCTB(ResultDataTB,ResultDataTC,year=yea,wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of the number per sex in TB in case of sub-sampling in TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_raising(ResultDataTB,ResultDataTC,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TB"
checkName = "Check on date by haul TB"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA, ResultDataTB, year=yea, wd, suffix)
}
if(verbose){stop_ =printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TC"
checkName = "Check on date by haul TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA, ResultDataTC, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
#Check on TE
if (!(all(is.na(TE)) & length(TE)==1)) {
if (nrow(ResultDataTE)>0){
table <- "TA-TE"
checkName = "Check on date by haul TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA,ResultDataTE, year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TE"
checkName = "Check consistency of maturity stages TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_mat_stages(ResultDataTE,year=yea, wd, suffix, stages = stages_list)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC-TE"
checkName = "Cross check on number between TC and TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_TE_TC(ResultDataTC,ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TE"
checkName = "Check consistency of maturity stages TE by the comparison with the length of smallest mature individuals reported in bibliography"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_smallest_mature(ResultDataTE,year=yea,MaturityParameters=Maturity,TargetSpecies=DataTargetSpecies,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# table <- "TA-TE"
# checkName = "Check consistency of maturity stages in TE by means of spawning period"
# if (check_without_errors == TRUE) {
#   if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
#   check_without_errors = check_spawning_period(ResultDataTA,ResultDataTE,year=yea,Maturity_parameters=Maturity,DataTargetSpecies=DataTargetSpecies,wd,suffix)
# }
#   if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
# check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
# check.df <- check.list[[1]]
# check_without_errors <- check.list[[2]]
# check_without_warnings <- check.list[[3]]
table <- "TE"
checkName = "Check individual weight in TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_individual_weightTE(ResultDataTE,LW=ab_parameters,year=yea,wd,suffix,verbose=FALSE)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of species codes TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_rubincode(ResultDataTE,year=yea,TMlist=Ref_list,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency TE check-fields"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_nb_TE(ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC-TE"
checkName = "Summary individual data sampling"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = scheme_individual_data(DataTC=ResultDataTC,DataTE=ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
# Checks on TL
if (!(all(is.na(TL)) & length(TL)==1)) {
if (nrow(ResultDataTL)>0){
table <- "TL"
checkName = "Check allowed values for category on Litter data"
Field = "LITTER_CATEGORY"
Values = c("L0","L1","L2","L3","L4","L5","L6","L7","L8","L9")
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData=ResultDataTL,Field, Values, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check allowed values for sub-category on Litter data"
Field = "LITTER_SUB-CATEGORY"
Values = c("0","A","B","C","D","E","F","G","H","I","J","a","b","c","d","e","f","g","h","i","j")
colnames(ResultDataTL)[10]="LITTER_SUB-CATEGORY"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData=ResultDataTL,Field, Values, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
Field <- NA
checkName = "Check correctness of associations between category and sub-category on Litter data"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_associations_category_TL(ResultDataTL,assTL, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# checkName = "Check if the number is always filled in on Litter data"
# if (check_without_errors == TRUE) {
#       if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
#       check_without_errors = check_no_empty_fields(ResultDataTL,year=yea,wd,suffix)
#     }
#     if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
# check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
# check.df <- check.list[[1]]
# check_without_errors <- check.list[[2]]
# check_without_warnings <- check.list[[3]]
table <- "TA-TL"
checkName = "Check if the hauls in TL are present in TA"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TLTA(ResultDataTA,ResultDataTL,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TL"
checkName = "Check if the hauls in TA are present in TL"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TATL(ResultDataTA,ResultDataTL,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TL"
checkName = "Check if the date in TL is consistent with TA"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA, ResultDataTL, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
if (!stop_) {
if(verbose){print("All the checks have been performed!",quote=FALSE)}
}
# # Create files for R_Sufi
#
# if ((!stop_) & (create_RSufi_files==TRUE)){
#   AREA <- ResultDataTA[1,"AREA"]
#   create_strata(Stratification=Stratification,AREA,wd,save=TRUE)
#   create_haul(ResultDataTA,year=yea,wd,save=TRUE)
#   create_catch(ResultDataTB,year=yea,wd,save=TRUE)
#
#
#   # if (!(all(is.na(TE)) & length(TE)==1)) {
#   #   if (nrow(ResultDataTE)>0){
#   #       create_length(ResultDataTE,DataSpecies=Ref_list,wd)
#   #   }
#   # }
#
#     if (nrow(ResultDataTC)>0){
#       create_length(ResultDataTC,year=yea,DataSpecies=Ref_list,wd,save=TRUE)
#     }
#
#   print(paste("R-Sufi files have been created for the ",yea, "and the GSA selected! They have been stored in files R-Sufi directory."),quote=FALSE)
# }
} # ciclo years
} # year_without_error | TYPE_OF_FILE_without_error are FALSE
} # check_header
