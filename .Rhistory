if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
}
if ((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) ){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
}
ResultData$stratum_s
ResultData$stratum_s
ResultData$stratum_e
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="5"
}
}
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
}
if ((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) ){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
}
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\TA_MEDITS_SVN_17_REV.csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=1996
check_stratum(ResultData,year,wd,suffix)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
ResultData
year=2019
check_stratum(ResultData,year,wd,suffix)
stratification_scheme[stratification_scheme$COUNTRY="ROU",]
stratification_scheme[stratification_scheme$COUNTRY=="ROU",]
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultData <- ResultData[ResultData$YEAR == year, ]
#ResultData = read.csv(paste(Data,".csv",sep=""), sep=";", header=TRUE)
write(paste("\n----------- check start depth and end depth in the same stratum TA - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData$stratum_s <- NA
ResultData$stratum_e <- NA
GSA  <- unique(ResultData$AREA)[1]
strata <- stratification_scheme[stratification_scheme$GSA == GSA, ]
strata
i=1
strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1])
ResultData$SHOOTING_DEPTH[i]
strata[strata$COUNTRY==ResultData$COUNTRY[i]
& strata$CODE==1,"MIN_DEPTH"][1]
(ResultData$SHOOTING_DEPTH[i]
ResultData$SHOOTING_DEPTH[i]
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1]
(1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1]))
(2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1]))
ResultData$stratum_s[i]="2"
i=1
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
ResultData$stratum_s
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="5"
}
ResultData$stratum_e[i]
ResultData$stratum_e
k=1
(any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))))
((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) )
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
check_stratum(ResultData,year,wd,suffix)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultData <- ResultData[ResultData$YEAR == year, ]
#ResultData = read.csv(paste(Data,".csv",sep=""), sep=";", header=TRUE)
write(paste("\n----------- check start depth and end depth in the same stratum TA - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData$stratum_s <- NA
ResultData$stratum_e <- NA
GSA  <- unique(ResultData$AREA)[1]
strata <- stratification_scheme[stratification_scheme$GSA == GSA, ]
strata
i=1
1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
ResultData$COUNTRY[i]
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1])
ResultData$SHOOTING_DEPTH[i]
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])
2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1])
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1]
(
2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] &
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) &
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])
)
ResultData$stratum_s[i]="2"
for (i in 1:nrow(ResultData)){
if (
1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] &
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) &
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])
){
ResultData$stratum_s[i]="1"
} else if (
2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] &
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) &
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])
){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
ResultData$stratum_s
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="5"
}
}
ResultData$stratum_e
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="5"
}
}
ResultData$stratum_e
k=1
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
}
if ((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) ){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
}
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
check_stratum(ResultData,year,wd,suffix)
library(RoME)
RoME::TM_list
View(RoME::TM_list)
View(RoMEBS::TM_list)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\MEDITS_GSA5" #  "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\MEDITS_GSA5" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
GSA <- 5
years <- c(2002,2002)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\MEDITS_GSA5" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\2002_TA_5.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(filedir, "\\2002_TB_5.csv",sep=""), sep=",", header=T)
tc <- read.table(file=paste(filedir, "\\2002_TC_5.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# te[1,"LENGTH_CLASS"] <- NA
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
tmp <- tempdir()
dir.create(file.path(tmp, "wd"))
wd <- file.path(tmp, "wd")
zipfile <- paste0("/tmp/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
while (file.exists(zipfile)) {
zipfile <- paste0("/tmp/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
}
zipfile
tmp
zipfile <- paste0(tmp,"/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
zipfile <- paste0(tmp,"/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
while (file.exists(zipfile)) {
zipfile <- paste0(tmp,"/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
}
zipfile
tempdir()
tmp <- tempdir()
dir.create(file.path(tmp, "wd"))
wd <- file.path(tmp, "wd")
zipfile <- paste0(tmp,"/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
while (file.exists(zipfile)) {
zipfile <- paste0(tmp,"/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
}
tadata <- rawToChar(f[[1]])
text_con_ta <- textConnection(tadata)
ta <- read.table(text_con_ta,sep=",",header=T)
ta <- headers.conversion(ta,"TA")
tb <- headers.conversion(tb,"TB")
tc <- headers.conversion(tc,"TC")
te <- NA
tl <- NA
countries = unique((ta$COUNTRY))
if (length(countries) > 1) { # in case the dataset mixes different countries stop the process
res$status <- 400
stop('Dataset contains data from multiple countries.')
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
if (countries[1] %in% c('BGR', 'ROU'))  {
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=wd,
zip=FALSE,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
} else {
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=wd,
zip=FALSE,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
}
zipfile
tmp
?zip::zip
wd
zip::zip(zipfile, "wd", root = tmp)
val <- readBin(zipfile, "raw", n=file.info(zipfile)$size)
library(RoME)
#library(MEDITS)
wd <- tempdir() # "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME\\temp"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
DataTA = ta # RoME::TA #read.csv("~/GitHub/RoME/data/TA_GSA18_1994-2018.csv", sep=";")
year=2018
#DataTA[1, "SHOOTING_LATITUDE" ] <- 435.11
check_distance(DataTA,year,wd,suffix)
DataTA
year=2015
#DataTA[1, "SHOOTING_LATITUDE" ] <- 435.11
check_distance(DataTA,year,wd,suffix)
library(RoME)
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
GSA <- 29
COUNTRY <- "BGR"
GENUS <- "PSET"
SPECIES <- "MAX"
years <- c(2014,2014)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(wd, "\\TB_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(wd, "\\TC_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years & ta$COUNTRY %in% COUNTRY, ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years & tb$GENUS %in% GENUS & tb$SPECIES %in% SPECIES, ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years & tc$GENUS %in% GENUS & tc$SPECIES %in% SPECIES, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
library(ggplot2)
d <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/SEAwise/3.5/MUT_anello1_20240209.csv", sep=";")
d$area <- paste(d$gsa,d$country,sep="-")
library(ggplot2)
d <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/SEAwise/3.5/MUT_anello1_20240209.csv", sep=";")
attach(d)
ggplot(d, aes(x=gruppi,y=mm)) +
geom_boxplot()
oneway <- aov(mm ~ gruppi, data = d)
summary(oneway)
TukeyHSD(oneway)
df <- data.frame(oneway$model)
kk <- TukeyHSD(oneway)
pv <- kk$period[4]
data.frame(oneway$model)
pairwise.t.test(mm, area, p.adj = "none")
pairwise.t.test(mm, gruppi, p.adj = "none")
library(ggplot2)
d <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/SEAwise/3.5/MUT_anello1_20240209.csv", sep=";")
attach(d)
ggplot(d, aes(x=Groups,y=mm)) +
geom_boxplot()
oneway <- aov(mm ~ Groups, data = d)
summary(oneway)
TukeyHSD(oneway)
df <- data.frame(oneway$model)
kk <- TukeyHSD(oneway)
pv <- kk$period[4]
data.frame(oneway$model)
pairwise.t.test(mm, Groups, p.adj = "none")
