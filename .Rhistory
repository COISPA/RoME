data <- tad[, c("id","COUNTRY", "AREA", "VESSEL", "YEAR", "MONTH", "DAY", "HAUL_NUMBER")]
data
data$lon <- rowMeans(cbind(tad$SHOOTING_LONGITUDE,tad$HAULING_LONGITUDE))
data$lat <- rowMeans(cbind(tad$SHOOTING_LATITUDE,tad$HAULING_LATITUDE))
data$depth <- rowMeans(cbind(tad$SHOOTING_DEPTH,tad$HAULING_DEPTH))
data$duration <- tad$HAUL_DURATION/60
data$distance <- tad$DISTANCE
data$wing_opening <- tad$WING_OPENING
data$swept_area <- (data$wing_opening/10000)*(data$distance/1000)
data$swept_area
#------------------  Y table
#-----------
sp_to_remove <- c("CEPA EGG","GASR EGG","LOLI EGG","MURE EGG","RAJA EGG","SCYO EGG","SEPI EGG", "POSI EGA","POSI LEA","SHEL DEB")
tm_list_sel <- read.table(file.path(datadir,"TM_list_sel.csv"),sep=";",header=TRUE)
sp_sel <- paste(substr(tm_list_sel$code,1,4), substr(tm_list_sel$code,5,7),sep=" ")
sp_sel
Sel_species <- tm_list_sel$scientific_name
Sel_species
sp_sel
m <- m.TATB(ta,tb,sspp="all")
#-----------
GSAs <- unique(ta$AREA)
GSAs
#-----------
GSAs <- unique(ta$AREA)
m = list()
i=1
m[[i]] <- m.TATB(ta[ta$AREA %in% GSAs[i],],tb[tb$AREA %in% GSAs[i],],sspp="all")
m[[i]]
m[[i]] <- m[[i]][!m[[i]]$MEDITS_CODE %in% sp_to_remove, ]
m[[i]]
sp_to_remove
m[[i]] <- m[[i]][m[[i]]$MEDITS_CODE %in% sp_sel, ]
m[[i]]
m[[i]] <- m[[i]][m[[i]]$MEDITS_CODE %in% sp_sel, ]
m[[i]]
for (i in 1:length(GSAs)){
m[[i]] <- m.TATB(ta[ta$AREA %in% GSAs[i],],tb[tb$AREA %in% GSAs[i],],sspp="all")
m[[i]] <- m[[i]][!m[[i]]$MEDITS_CODE %in% sp_to_remove, ]
m[[i]] <- m[[i]][m[[i]]$MEDITS_CODE %in% sp_sel, ]
}
m <- do.call(rbind,m)
mat_sp <- Mmatrix(m)
mat_sp
mat_sp
row.names(mat_sp)
id
id[which(! id %in% row.names(mat_sp))]
# add NULL hauls
{
id_miss <- id[which(! id %in% row.names(mat_sp))]
n_miss <- length(id_miss)
miss <- data.frame(matrix(ncol=ncol(mat_sp), nrow=n_miss,0))
colnames(miss) <- colnames(mat_sp)
rownames(miss) <- id_miss
mat_sp <- rbind(mat_sp,miss)
}
id <- rownames(mat_sp)
id
nrow(ta)
ncol(mm)
ncol(mat_sp)
ncol(mat_sp)
mat_sp <- Mmatrix(m)
mat_sp
ncol(mat_sp)
mat_sp
mat_sp <- Mmatrix(m)
# add NULL hauls
{
id_miss <- id[which(! id %in% row.names(mat_sp))]
n_miss <- length(id_miss)
miss <- data.frame(matrix(ncol=ncol(mat_sp), nrow=n_miss,0))
colnames(miss) <- colnames(mat_sp)
rownames(miss) <- id_miss
mat_sp <- rbind(mat_sp,miss)
}
id <- rownames(mat_sp)
mat_sp <- cbind(id,mat_sp)
rownames(mat_sp) <- seq(1:nrow(mat_sp))
mm <- merge(mat_sp, data[, c("id","swept_area")])
for (c in 2:(ncol(mm)-1)) {
mm[,c] <- mm[,c]/mm$swept_area
}
mm <- mm[, 1:(ncol(mm)-1)]
nn <- colnames(mm[,-1])
nn
sp_colnames <- merge(data.frame(id=nn),tm[,-1],by.x="id", by.y="code")
names <- sp_colnames$scientific_name
nn <- names  # strsplit(names," ")
colnames(mm) <- c("sample",names)
Y <- mm[,-1]
Y <- Y[, which(colnames(Y) %in% Sel_species)]
Y <- data.frame(Y %>% relocate(sort(names)))
split <- strsplit(colnames(Y),"[.]")
ddd <- NA
for (l in 1:length(split)) {
ddd[l] <- paste(split[[l]],collapse=" ")
}
colnames(Y) <- ddd
# write.table(Y, file.path(datadir,paste0("Y_table",paste(range(YEARS),collapse="_"),".csv")),sep=";",row.names=FALSE)
Y
env <- read.csv("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\ENV\\HAULS_ENV\\HAULS_DB_ENV_HINDCAST_202309.csv", sep=";")
ids
# env <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/B-USEFUL/jSDM/Data/TA_coords_ENV.csv", sep=";")
ids <- data.frame(ids=mm$sample)
ids
data.frame(ids=mm$sample)
# env <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/B-USEFUL/jSDM/Data/TA_coords_ENV.csv", sep=";")
ids <- data.frame(ids=mm$sample)
env
menv <- merge(ids,env, by.x="ids",by.y="ids",all.x=TRUE)
menv
summary(menv)
data.frame(colnames(menv))
menv <- menv[, c(1:25)]
menv
##  VARIABLE SELECTION  ##
menv <- menv[, c(1:25)]
menv$strata <- NA
menv[menv$depth < 200, "strata"] <- "shelf"
menv[menv$depth >= 200, "strata"] <- "slope"
#-------------  X table
env_var <- c("sst","botT","chl","nppv","so","botso","depth")
env_var
menv[,env_var]
#-------------  X table
env_var <- c("sst","botT","chl","nppv","so","botso","depth")
X <- menv[,env_var]
colnames(menv)
colnames(menv) <- c("ids","X","Y","HAUL", "YEAR","MONTH","DAY","GSA","COUNTRY","depth","MSFD_BBHT","sst", "so","chl","dox","nit", "nppv","pho","phyc","vomecrty", "vozocrtx","botT","botvomecrty","botvozocrtx", "botso","strata")
#-------------  X table
env_var <- c("sst","botT","chl","nppv","so","botso","depth")
X <- menv[,env_var]
X
#--------  table P
i=1
for (i in 1:length(nn)) {
ntemp <- data.frame(genus=nn[[i]][1],species=names[i])
if (i==1) {
nnn <- ntemp
} else {
nnn <- rbind(nnn,ntemp)
}
}
ss <- nnn$species
nnn <- paste(nnn[,2],sep="")
#-------------
www <- list()
s50 <- floor(length(nnn)/50)+1
s=1
for (s in 1:s50){
si <- 1 +(50*(s-1))
sn <- 1 +(50*s)-1
if (sn > length(nnn)) {
sn <- length(nnn)
}
www[[s]] <- wormsbymatchnames(nnn[si:sn], verbose = TRUE, ids = FALSE,
chunksize = length(which(!is.na(nnn[si:sn]))), marine_only = "true", sleep_btw_chunks_in_sec = 0.1)[, c("phylum","class","order","family","genus")]
www[[s]]$species <- NA
www[[s]]$species[1:length(www[[s]]$species)] <- ss[si:sn]
}
www <- do.call(rbind,www)
# www <- www[!is.na(www$species),]
www <- www[www$species %in% Sel_species, ]
www <- www[order(www$species),]
# write.table(www,file.path(resdir,paste0("taxa_sel_",paste(range(YEARS),collapse="_"),".csv")),sep=";",row.names = FALSE)
www
library(ape)
www$phylum <- as.factor(www$phylum)
www$class <- as.factor(www$class)
www$order <- as.factor(www$order)
www$family <- as.factor(www$family)
www$genus <- as.factor(www$genus)
www$species <- as.factor(www$species)
P <- as.phylo(~class/order/family/genus/species, data=www, collapse = FALSE)
P$edge.length<-rep(1,length(P$edge))
P$tip.label<-gsub("_"," ",P$tip.label)
Y <- Y[, colnames(Y) %in% P$tip.label]
if(all(sort(P$tip.label) == sort(colnames(Y)))){
print("species names in P and SXY match")
} else{
print("species names in P and SXY do not match")
}
plot(P, cex=.5)
jpeg(file.path(resdir,paste0("phylogenetic_tree_",paste(range(YEARS),collapse="_"),".jpg")),res=300,height = 8,width = 8,units = "in")
plot(P, cex=.5)
dev.off()
#---------------------------  Tr table
Tr <- Tr[!is.na(Tr$Age.maturity),c("Trophic.level","K","Lmax","Lifespan","Age.maturity")]
Tr <- Tr[row.names(Tr) %in% names,c("Trophic.level","K","Lmax","Lifespan","Age.maturity")]
Tr <- Tr[ order(row.names(Tr)), ]
Tr <- Tr[row.names(Tr) %in% colnames(Y),]
if(all(rownames(Tr)==colnames(Y))) {
print("species names in Tr and SXY match")
} else{
print("species names in Tr and SXY do not match")
}
if (is.numeric(as.matrix(Y)) || is.logical(as.matrix(Y)) && is.finite(sum(Y, na.rm=TRUE))) {
print("Y looks OK")
} else {
print("Y should be numeric and have finite values")	}
# Check that the study design data do not have missing values (they are allowed for Y but not S, X, P or Tr)
if (any(is.na(S))) {
print("S has NA values - not allowed for")
} else {
print("S looks ok")	}
S
S <- data.frame(ID = menv$ids,Longitude = menv$lon, Latitude=menv$lat, Strata=menv$strata)
colnames(menv) <- c("ids","lon","lat","HAUL", "YEAR","MONTH","DAY","GSA","COUNTRY","depth","MSFD_BBHT","sst", "so","chl","dox","nit", "nppv","pho","phyc","vomecrty", "vozocrtx","botT","botvomecrty","botvozocrtx", "botso","strata")
menv$strata <- NA
menv[menv$depth < 200, "strata"] <- "shelf"
menv[menv$depth >= 200, "strata"] <- "slope"
S <- data.frame(ID = menv$ids,Longitude = menv$lon, Latitude=menv$lat, Strata=menv$strata)
# Check that the study design data do not have missing values (they are allowed for Y but not S, X, P or Tr)
if (any(is.na(S))) {
print("S has NA values - not allowed for")
} else {
print("S looks ok")	}
# Check that the covariate data do not have missing values (they are allowed for Y but not S, X, P or Tr)
if (any(is.na(X))) {
print("X has NA values - not allowed for")
} else {
print("X looks ok")	}
# Safe your convenient Rdata file that includes all you need for building your HMSC model. Remember, Tr and P are fully optional
save(S,X,Y,Tr,P, file=file.path(resdir, paste0("GSA171819_1999_2021_Data_HMSC_",paste(range(YEARS),collapse="_"),".Rdata")))
resdir
resdir <- file.path("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
resdir <- file.path("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\Results")
# suppressWarnings(dir.create(resdir))
datadir <- resdir
load("GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
load("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
if (cluster){
load("GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
} else {
resdir <- file.path("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\Results")
# suppressWarnings(dir.create(resdir))
datadir <- resdir
load("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
}
resdir <- file.path("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\Results")
# suppressWarnings(dir.create(resdir))
datadir <- resdir
load("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
coord <- S[,c(2,3)]
row.names(coord) <- row.names(S)
res2 <- rcorr(as.matrix(X))
X <- X[,-which(colnames(X) %in% c("sst","chl"))]
rm(list=ls())
library(Hmsc)
library(tidyverse)
library(viridis)
library(vioplot)
library(abind)
library(RColorBrewer)
library(ape)
library(corrplot)
library(snow)
library(Hmisc)
YEARS <- 1999:2021
RUN_SAVE_MOD <- TRUE
cluster <- TRUE
test.run = TRUE
if (cluster){
load("GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
} else {
resdir <- file.path("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\Results")
# suppressWarnings(dir.create(resdir))
datadir <- resdir
load("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
}
resdir <- file.path("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\Results")
# suppressWarnings(dir.create(resdir))
datadir <- resdir
load("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
coord <- S[,c(2,3)]
row.names(coord) <- row.names(S)
res2 <- rcorr(as.matrix(X))
X <- X[,-which(colnames(X) %in% c("sst","chl"))]
XFormula = as.formula(paste("~",paste(colnames(X), collapse="+")))
TrFormula = as.formula(paste("~",paste(colnames(Tr), collapse="+")))
studyDesign = data.frame(grid.cell = as.factor(rownames(coord)))
rL = HmscRandomLevel(sData = coord)
rL = setPriors(rL,nfMin=1,nfMax=2)
Y <- log(Y+1)
if (test.run){
thin = 10
samples = 100
transient = ceiling(0.5*thin*samples)
nChains = 4
} else {
thin = 1000
samples = 100
transient = ceiling(0.5*thin)
nChains = 2
}
thin
nChains
# 2.4 Specify (unfitted) HMSC model structure
nParallel = 4
filename =  paste("MEDITS","_thin_", as.character(thin),"_samples_", as.character(samples),"_chains_", as.character(nChains), "_",paste(range(YEARS),collapse="_"),".Rdata",sep = "")
resdir
resdir <- file.path("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\Results")
setwd(resdir)
datadir <- resdir
load("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\DRAGO cluster\\DATA\\GSA171819_1999_2021_Data_HMSC_1999_2021.Rdata")
coord <- S[,c(2,3)]
row.names(coord) <- row.names(S)
res2 <- rcorr(as.matrix(X))
X <- X[,-which(colnames(X) %in% c("sst","chl"))]
XFormula = as.formula(paste("~",paste(colnames(X), collapse="+")))
TrFormula = as.formula(paste("~",paste(colnames(Tr), collapse="+")))
studyDesign = data.frame(grid.cell = as.factor(rownames(coord)))
rL = HmscRandomLevel(sData = coord)
rL = setPriors(rL,nfMin=1,nfMax=2)
Y <- log(Y+1)
# 2.4 Set up MCMC sample specifications
if (test.run){
thin = 10
samples = 100
transient = ceiling(0.5*thin*samples)
nChains = 4
} else {
thin = 1000
samples = 100
transient = ceiling(0.5*thin)
nChains = 2
}
##############
# 2.4 Specify (unfitted) HMSC model structure
nParallel = 4
filename =  paste("MEDITS","_thin_", as.character(thin),"_samples_", as.character(samples),"_chains_", as.character(nChains), "_",paste(range(YEARS),collapse="_"),".Rdata",sep = "")
if (RUN_SAVE_MOD){
t0 <- Sys.time()
m = Hmsc(Y= Y, XData = X,  XFormula = XFormula, TrFormula = TrFormula, TrData = Tr, phyloTree = P, studyDesign = studyDesign, ranLevels = list("grid.cell"= rL),  distr = "normal")
#----------------------
# 2.5 Fit and save model
m = sampleMcmc(m, thin = thin, samples = samples, transient = transient, nChains = nChains, nParallel = nParallel) #
save(m,file=filename)
t1 <- Sys.time()
t1-t0
}
# 2.4 Specify (unfitted) HMSC model structure
nParallel = 2
filename =  paste("MEDITS","_thin_", as.character(thin),"_samples_", as.character(samples),"_chains_", as.character(nChains), "_",paste(range(YEARS),collapse="_"),".Rdata",sep = "")
if (RUN_SAVE_MOD){
t0 <- Sys.time()
m = Hmsc(Y= Y, XData = X,  XFormula = XFormula, TrFormula = TrFormula, TrData = Tr, phyloTree = P, studyDesign = studyDesign, ranLevels = list("grid.cell"= rL),  distr = "normal")
#----------------------
# 2.5 Fit and save model
m = sampleMcmc(m, thin = thin, samples = samples, transient = transient, nChains = nChains, nParallel = nParallel) #
save(m,file=filename)
t1 <- Sys.time()
t1-t0
}
gc()
memory.limit()
library(RoME)
library(RoME)
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\Workshop 2\\RoME\\Results"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\Workshop 2\\dati\\MEDITS"
GSA <- 20
years <- 2021
# # load TX tables for a unique GSA per time
ta <- read.csv(file.path(filedir,"medits_ta.csv"), sep=";")
tb <- read.csv(file.path(filedir,"medits_tb.csv"), sep=";")
tc <- read.csv(file.path(filedir,"medits_tc.csv"), sep=";")
te <- NA
tl <- NA
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- headers.conversion(ta,"TA")
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years, ]
tb <- headers.conversion(tb,"TB")
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years, ]
tc <- headers.conversion(tc,"TC")
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- headers.conversion(te,"TE")
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- headers.conversion(tl,"TL")
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
resdir
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
# Set working directory were all the results will be stored
# resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\Workshop 2\\RoME\\Results"
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\Results"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
years <- 2015
# # load TX tables for a unique GSA per time
ta <- read.csv(file.path(filedir,"medits_ta.csv"), sep=";")
tb <- read.csv(file.path(filedir,"medits_tb.csv"), sep=";")
tc <- read.csv(file.path(filedir,"medits_tc.csv"), sep=";")
te <- NA
tl <- NA
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- headers.conversion(ta,"TA")
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years, ]
tb <- headers.conversion(tb,"TB")
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years, ]
tc <- headers.conversion(tc,"TC")
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- headers.conversion(te,"TE")
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- headers.conversion(tl,"TL")
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
RoME::templateTA
colnames(RoME::templateTA)
data.frame(colnames(RoME::templateTA))
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/Test_RoMEcc.R", echo=TRUE)
library(RoME)
RoME::templateTA
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoME.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoME.R", echo=TRUE)
library(RoME)
