if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_individual_weightTC(ResultDataTC,LW=ab_parameters,year=yea,wd,suffix, verbose=FALSE)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of species codes TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_rubincode(ResultDataTC,year=yea,TM_list=Ref_list,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check presence of lengths for G1 and G2 Medits species in TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_G1_G2(ResultDataTC, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# cross checks
table <- "TB-TA"
checkName = "Check presence in TB of TA hauls"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TATB(ResultDataTA,ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TB"
checkName = "Check presence in TA of TB hauls"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TBTA(ResultDataTA,ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC-TB"
checkName = "Check presence in TC of TB target species"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_species_TBTC(ResultDataTB,ResultDataTC,year=yea,DataSpecies=DataTargetSpecies,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TB-TC"
checkName = "Check presence in TB of TC species"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_haul_species_TCTB(ResultDataTB,ResultDataTC,year=yea,wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of the number per sex in TB in case of sub-sampling in TC  "
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_raising(ResultDataTB,ResultDataTC,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TB"
checkName = "Check on date by haul TB"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA, ResultDataTB, year=yea, wd, suffix)
}
if(verbose){stop_ =printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TC"
checkName = "Check on date by haul TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA, ResultDataTC, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
#Check on TE
if (!(all(is.na(TE)) & length(TE)==1)) {
if (nrow(ResultDataTE)>0){
table <- "TA-TE"
checkName = "Check on date by haul TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA,ResultDataTE, year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TE"
checkName = "Check consistency of maturity stages TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_mat_stages(ResultDataTE,year=yea, wd, suffix, stages = stages_list)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC-TE"
checkName = "Cross check on number between TC and TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_TE_TC(ResultDataTC,ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TE"
checkName = "Check consistency of maturity stages TE by the comparison with the length of smallest mature individuals reported in bibliography"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_smallest_mature(ResultDataTE,year=yea,Maturity_parameters=Maturity,DataTargetSpecies=DataTargetSpecies,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# table <- "TA-TE"
# checkName = "Check consistency of maturity stages in TE by means of spawning period"
# if (check_without_errors == TRUE) {
#   if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
#   check_without_errors = check_spawning_period(ResultDataTA,ResultDataTE,year=yea,Maturity_parameters=Maturity,DataTargetSpecies=DataTargetSpecies,wd,suffix)
# }
#   if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
# check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
# check.df <- check.list[[1]]
# check_without_errors <- check.list[[2]]
# check_without_warnings <- check.list[[3]]
table <- "TE"
checkName = "Check individual weight in TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_individual_weightTE(ResultDataTE,LW=ab_parameters,year=yea,wd,suffix,verbose=FALSE)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check correctness of species codes TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_rubincode(ResultDataTE,year=yea,TM_list=Ref_list,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check consistency TE check-fields"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_nb_TE(ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC-TE"
checkName = "Summary individual data sampling"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = scheme_individual_data(DataTC=ResultDataTC,DataTE=ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
# Checks on TL
if (!(all(is.na(TL)) & length(TL)==1)) {
if (nrow(ResultDataTL)>0){
table <- "TL"
checkName = "Check allowed values for category on Litter data"
Field = "LITTER_CATEGORY"
Values = c("L0","L1","L2","L3","L4","L5","L6","L7","L8","L9")
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData=ResultDataTL,Field, Values, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
checkName = "Check allowed values for sub-category on Litter data"
Field = "LITTER_SUB-CATEGORY"
Values = c("0","A","B","C","D","E","F","G","H","I","J","a","b","c","d","e","f","g","h","i","j")
colnames(ResultDataTL)[10]="LITTER_SUB-CATEGORY"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData=ResultDataTL,Field, Values, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
Field <- NA
checkName = "Check correctness of associations between category and sub-category on Litter data"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_associations_category_TL(ResultDataTL,assTL, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
# checkName = "Check if the number is always filled in on Litter data"
# if (check_without_errors == TRUE) {
#       if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
#       check_without_errors = check_no_empty_fields(ResultDataTL,year=yea,wd,suffix)
#     }
#     if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
# check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
# check.df <- check.list[[1]]
# check_without_errors <- check.list[[2]]
# check_without_warnings <- check.list[[3]]
table <- "TA-TL"
checkName = "Check if the hauls in TL are present in TA"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TLTA(ResultDataTA,ResultDataTL,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TL"
checkName = "Check if the hauls in TA are present in TL"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_hauls_TATL(ResultDataTA,ResultDataTL,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA-TL"
checkName = "Check if the date in TL is consistent with TA"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_date_haul(ResultDataTA, ResultDataTL, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
if (!stop_) {
if(verbose){print("All the checks have been performed!",quote=FALSE)}
}
# # Create files for R_Sufi
#
# if ((!stop_) & (create_RSufi_files==TRUE)){
#   AREA <- ResultDataTA[1,"AREA"]
#   create_strata(Stratification=Stratification,AREA,wd,save=TRUE)
#   create_haul(ResultDataTA,year=yea,wd,save=TRUE)
#   create_catch(ResultDataTB,year=yea,wd,save=TRUE)
#
#
#   # if (!(all(is.na(TE)) & length(TE)==1)) {
#   #   if (nrow(ResultDataTE)>0){
#   #       create_length(ResultDataTE,DataSpecies=Ref_list,wd)
#   #   }
#   # }
#
#     if (nrow(ResultDataTC)>0){
#       create_length(ResultDataTC,year=yea,DataSpecies=Ref_list,wd,save=TRUE)
#     }
#
#   print(paste("R-Sufi files have been created for the ",yea, "and the GSA selected! They have been stored in files R-Sufi directory."),quote=FALSE)
# }
} # ciclo years
} # year_without_error | TYPE_OF_FILE_without_error are FALSE
} # check_header
getwd()
rm(list=ls())
# load libraries
library(RoME)
# set GSA for the analysis
GSA <- 17
# set working directory (where results are saved)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\01b_check MEDITS data with RoME"
# load data files (TA, TB and TC)
ta <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TA_GSA",GSA,".csv"), sep=";")
tb <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TB_GSA",GSA,".csv"), sep=";")
tc <- read.csv(paste0("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\B-USEFUL\\_DATA_MED_\\MED_DATA\\Data for GSA\\TA-TB-TC\\TC_GSA",GSA,".csv"), sep=";")
te <- NA
tl <- NA
# data filtering for the selected GSA
ta <- ta[ta$AREA ==GSA, ]
tb <- tb[tb$AREA ==GSA, ]
tc <- tc[tc$AREA ==GSA, ]
ResultDataTB = tb # RoME::TB
ResultDataTC = tc # RoME::TC
ResultDataTB = tb # RoME::TB
ResultDataTC = tc # RoME::TC
year=2002
tempdir()
suffix=paste(as.character(Sys.Date()
wd <- tempdir()
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultDataTB <- ResultDataTB[ResultDataTB$YEAR == year, ]
ResultDataTC <- ResultDataTC[ResultDataTC$YEAR == year, ]
check_raising(ResultDataTB,ResultDataTC,year,wd,suffix)
wd
ResultDataTB = tb # RoME::TB
ResultDataTC = tc # RoME::TC
year=2002
wd <- tempdir()
wd
ResultDataTB = tb # RoME::TB
ResultDataTC = tc # RoME::TC
year=2002
wd <- tempdir()
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
check_raising(ResultDataTB,ResultDataTC,year,wd,suffix)
ResultDataTB = tb # RoME::TB
ResultDataTC = tc # RoME::TC
year=2002
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\temp" # tempdir()
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
check_raising(ResultDataTB,ResultDataTC,year,wd,suffix)
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultDataTB <- ResultDataTB[ResultDataTB$YEAR == year, ]
ResultDataTC <- ResultDataTC[ResultDataTC$YEAR == year, ]
ResultTC = ResultDataTC
write(paste("\n----------- check correctness of the number per sex in TB in case of sub-sampling in TC - ",ResultTC$YEAR[1]), file = Errors, append = TRUE)
ResultTB = ResultDataTB
ResultTB= ResultTB[,which(names(ResultTB)=="YEAR" | names(ResultTB)=="COUNTRY" | names(ResultTB)=="HAUL_NUMBER" | names(ResultTB)=="GENUS" | names(ResultTB)=="SPECIES" | names(ResultTB)=="TOTAL_WEIGHT_IN_THE_HAUL" | names(ResultTB)=="TOTAL_NUMBER_IN_THE_HAUL" | names(ResultTB)=="NB_OF_FEMALES" | names(ResultTB)=="NB_OF_MALES" | names(ResultTB)=="NB_OF_UNDETERMINED")]
ResultTB
class(ResultTC$WEIGHT_OF_THE_FRACTION)="numeric"
class(ResultTC$WEIGHT_OF_THE_SAMPLE_MEASURED)="numeric"
ResultTCpivot=aggregate(ResultTC$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE, by=list(ResultTC$COUNTRY, ResultTC$YEAR,ResultTC$HAUL_NUMBER,ResultTC$GENUS,ResultTC$SPECIES,as.numeric(as.character(ResultTC$WEIGHT_OF_THE_FRACTION)), as.numeric(as.character(ResultTC$WEIGHT_OF_THE_SAMPLE_MEASURED))),FUN="sum")
colnames(ResultTCpivot)=c("COUNTRY","YEAR", "HAUL_NUMBER", "GENUS", "SPECIES","WEIGHT_OF_THE_FRACTION",  "WEIGHT_OF_THE_SAMPLE_MEASURED","Sum")
( (nrow(ResultTB)!=0))
k=1
foundSpec = ResultTCpivot[as.character(ResultTCpivot$COUNTRY)==as.character(ResultTB$COUNTRY[k])
& as.character(ResultTCpivot$GENUS)==as.character(ResultTB$GENUS[k])
& as.character(ResultTCpivot$SPECIES)==as.character(ResultTB$SPECIES[k])
& as.numeric(ResultTCpivot$HAUL_NUMBER)==as.numeric(ResultTB$HAUL_NUMBER[k]),]
foundSpec
ResultTB$COUNTRY[k]
ResultTB$GENUS[k]
ResultTB$SPECIES[k]
ResultTB$HAUL_NUMBER[k]
foundSpec = ResultTCpivot[as.character(ResultTCpivot$COUNTRY)==as.character(ResultTB$COUNTRY[k])
& as.character(ResultTCpivot$GENUS)==as.character(ResultTB$GENUS[k])
& as.character(ResultTCpivot$SPECIES)==as.character(ResultTB$SPECIES[k])
& as.numeric(ResultTCpivot$HAUL_NUMBER)==as.numeric(ResultTB$HAUL_NUMBER[k]),]
(nrow(foundSpec) > 1)
(ResultTB[k,5]!=sum(foundSpec$WEIGHT_OF_THE_FRACTION)  )
ResultTB[k,5]
ResultTB
colnames(ResultTB)
(ResultTB[k,"TOTAL_WEIGHT_IN_THE_HAUL"]!= sum(foundSpec$WEIGHT_OF_THE_FRACTION)  )
(ResultTB[k,"TOTAL_WEIGHT_IN_THE_HAUL"]
ResultTB[k,"TOTAL_WEIGHT_IN_THE_HAUL"]
sum(foundSpec$WEIGHT_OF_THE_FRACTION)
paste("Haul",ResultTB$HAUL_NUMBER[k],ResultTB$GENUS[k], ResultTB$SPECIES[k], "WEIGHT_OF_THE_FRACTION in TC is not consistent with TOTAL_WEIGHT_IN_HAUL in TB. Impossible to continue with the other checks. Please correct and run the check again")
ResultTCpivot
ResultTCpivot
head(ResultTCpivot)
#queryTCpivotSex = paste("SELECT YEAR, HAUL_NUMBER, GENUS, SPECIES, SEX, SUM(NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE) AS SumSex, WEIGHT_OF_THE_FRACTION, WEIGHT_OF_THE_SAMPLE_MEASURED from ResultTC where  HAUL_NUMBER is not NULL group by YEAR, HAUL_NUMBER, GENUS, SPECIES, SEX, WEIGHT_OF_THE_FRACTION, WEIGHT_OF_THE_SAMPLE_MEASURED", sep="" )
ResultTCpivotSex=aggregate(ResultTC$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE, by=list(ResultTC$COUNTRY, ResultTC$YEAR,ResultTC$HAUL_NUMBER,ResultTC$GENUS,ResultTC$SPECIES,ResultTC$SEX,as.numeric(as.character(ResultTC$WEIGHT_OF_THE_FRACTION)), as.numeric(as.character(ResultTC$WEIGHT_OF_THE_SAMPLE_MEASURED))),FUN="sum")
colnames(ResultTCpivotSex)=c("COUNTRY","YEAR", "HAUL_NUMBER", "GENUS", "SPECIES","SEX","WEIGHT_OF_THE_FRACTION",  "WEIGHT_OF_THE_SAMPLE_MEASURED","SumSex")
ResultTCpivotSex$codedsex = ifelse(((as.character(ResultTCpivotSex$SEX)=="I") | (as.character(ResultTCpivotSex$SEX)=="N")), "I", as.character(ResultTCpivotSex$SEX))
ResultTCpivotSex
#queryTCpivotSex = paste("SELECT YEAR, HAUL_NUMBER, GENUS, SPECIES, SEX, SUM(NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE) AS SumSex, WEIGHT_OF_THE_FRACTION, WEIGHT_OF_THE_SAMPLE_MEASURED from ResultTC where  HAUL_NUMBER is not NULL group by YEAR, HAUL_NUMBER, GENUS, SPECIES, SEX, WEIGHT_OF_THE_FRACTION, WEIGHT_OF_THE_SAMPLE_MEASURED", sep="" )
ResultTCpivotSex=aggregate(ResultTC$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE, by=list(ResultTC$COUNTRY, ResultTC$YEAR,ResultTC$HAUL_NUMBER,ResultTC$GENUS,ResultTC$SPECIES,ResultTC$SEX,as.numeric(as.character(ResultTC$WEIGHT_OF_THE_FRACTION)), as.numeric(as.character(ResultTC$WEIGHT_OF_THE_SAMPLE_MEASURED))),FUN="sum")
colnames(ResultTCpivotSex)=c("COUNTRY","YEAR", "HAUL_NUMBER", "GENUS", "SPECIES","SEX","WEIGHT_OF_THE_FRACTION",  "WEIGHT_OF_THE_SAMPLE_MEASURED","SumSex")
ResultTCpivotSex$codedsex = ifelse(((as.character(ResultTCpivotSex$SEX)=="I") | (as.character(ResultTCpivotSex$SEX)=="N")), "I", as.character(ResultTCpivotSex$SEX))
ResultTCpivotSex=aggregate(ResultTCpivotSex$SumSex, by=list(ResultTCpivotSex$COUNTRY,ResultTCpivotSex$YEAR,ResultTCpivotSex$HAUL_NUMBER,ResultTCpivotSex$GENUS,ResultTCpivotSex$SPECIES,ResultTCpivotSex$codedsex,as.numeric(as.character(ResultTCpivotSex$WEIGHT_OF_THE_FRACTION)), as.numeric(as.character(ResultTCpivotSex$WEIGHT_OF_THE_SAMPLE_MEASURED))),FUN="sum")
colnames(ResultTCpivotSex)=c("COUNTRY","YEAR", "HAUL_NUMBER", "GENUS", "SPECIES","SEX","WEIGHT_OF_THE_FRACTION",  "WEIGHT_OF_THE_SAMPLE_MEASURED","SumSexTotal")
head(ResultTCpivotSex)
ResultTCpivotSex[ResultTCpivotSex$WEIGHT_OF_THE_SAMPLE_MEASURED==0,"WEIGHT_OF_THE_SAMPLE_MEASURED"] <- 0.0000000000000001
molt= as.numeric(as.character(ResultTCpivotSex$WEIGHT_OF_THE_FRACTION))/ as.numeric(as.character(ResultTCpivotSex$WEIGHT_OF_THE_SAMPLE_MEASURED))
ResultTCpivotSex$raising=ResultTCpivotSex$SumSexTotal *  molt
ResultTCpivotSex=aggregate(ResultTCpivotSex$raising, by=list(ResultTCpivotSex$COUNTRY,ResultTCpivotSex$YEAR,ResultTCpivotSex$HAUL_NUMBER,ResultTCpivotSex$GENUS,ResultTCpivotSex$SPECIES,ResultTCpivotSex$SEX),FUN="sum")
colnames(ResultTCpivotSex)=c("COUNTRY","YEAR", "HAUL_NUMBER", "GENUS", "SPECIES","SEX","Sum")
( (nrow(ResultTCpivotSex)!=0) & (numberError== 0))
j=1
oneRowTB = ResultTB[as.character(ResultTB$COUNTRY)==as.character(ResultTCpivotSex$COUNTRY[j])
& as.character(ResultTB$GENUS)==as.character(ResultTCpivotSex$GENUS[j])
& as.character(ResultTB$SPECIES)==as.character(ResultTCpivotSex$SPECIES[j])
& as.numeric(ResultTB$HAUL_NUMBER)==as.numeric(ResultTCpivotSex$HAUL_NUMBER[j]),]
oneRowTB
(nrow(oneRowTB)!=0)
(as.character(ResultTCpivotSex$SEX[j])=="F")
(as.character(ResultTCpivotSex$SEX[j])=="F")
TotalNumberTBSex = ifelse(Format=="before_2012",oneRowTB$NUMBER_OF_FEMALES[1],oneRowTB$NB_OF_FEMALES[1])
TotalNumberTBSex
if (as.character(ResultTCpivotSex$SEX[j])=="F") {
TotalNumberTBSex = ifelse(Format=="before_2012",oneRowTB$NUMBER_OF_FEMALES[1],oneRowTB$NB_OF_FEMALES[1])
} else if (as.character(ResultTCpivotSex$SEX[j])=="M") {
TotalNumberTBSex = ifelse(Format=="before_2012",oneRowTB$NUMBER_OF_MALES[1],oneRowTB$NB_OF_MALES[1])
} else {
TotalNumberTBSex = ifelse(Format=="before_2012",oneRowTB$NUMBER_OF_UNDETERMINED[1],oneRowTB$NB_OF_UNDETERMINED[1])
}
ResultTCpivotSex
((round(ResultTCpivotSex$Sum[j],0))!= round(TotalNumberTBSex,0))
(nrow(oneRowTB)!=0)
(nrow(oneRowTB)!=0)
paste("Haul ",ResultTCpivotSex$HAUL_NUMBER[j], " ",ResultTCpivotSex$COUNTRY[j], " ",  ResultTCpivotSex$GENUS[j], " ",  ResultTCpivotSex$SPECIES[j], ": number of individuals in TB (", round(TotalNumberTBSex,0),") not consistent with the sum of individuals raised per sex (",round(ResultTCpivotSex$Sum[j],0) ,") in TC", sep="")
source("~/GitHub/RoME/R/check_raising.r", echo=TRUE)
ResultDataTB = tb # RoME::TB
ResultDataTC = tc # RoME::TC
year=2002
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\temp" # tempdir()
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
check_raising(ResultDataTB,ResultDataTC,year,wd,suffix)
source("~/GitHub/RoME/R/check_raising.r", echo=TRUE)
ResultDataTB = tb # RoME::TB
ResultDataTC = tc # RoME::TC
year=2002
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\temp" # tempdir()
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
check_raising(ResultDataTB,ResultDataTC,year,wd,suffix)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/B-USEFUL/_DATA_MED_/MED_DATA/R script/01b_check MEDITS data with RoME.r", echo=TRUE)
