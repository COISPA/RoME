tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE    <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
checkHeader(ta,"TA",wd=wd,suffix=suffix)
checkHeader(tb,"TB",wd=wd,suffix=suffix)
checkHeader(tc,"TC",wd=wd,suffix=suffix)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=TRUE
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
years <- c(2021,2023) #sort(unique(ta$YEAR))  #c(2017,2018)
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(ta)
tb <- read.table(file=paste(filedir, "\\TB_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(tb)
tc <- read.table(file=paste(filedir, "\\TC_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(tc)
tc$TYPE_OF_FILE ="TC"
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
tb$TOTAL_WEIGHT_IN_THE_HAUL  <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION  <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED    <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED )
tc$LENGTH_CLASS  <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE    <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
checkHeader(ta,"TA",wd=wd,suffix=suffix)
checkHeader(tb,"TB",wd=wd,suffix=suffix)
checkHeader(tc,"TC",wd=wd,suffix=suffix)
# colnames(ta) <- colnames(RoME::TA)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# ta$BOTTOM_SALINITY_BEGINNING <- 15
# ta$BOTTOM_SALINITY_END <- 15
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=TRUE
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
tmp <- tempdir()
dir.create(file.path(tmp, "wd"))
wd <- file.path(tmp, "wd")
zipfile <- paste0(tmp,"/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
while (file.exists(zipfile)) {
zipfile <- paste0(tmp,"/", stringi::stri_rand_strings(1, 10, pattern = "[A-Za-z0-9]"), ".zip")
}
ta <- headers.conversion(ta,"TA")
tb <- headers.conversion(tb,"TB")
tc <- headers.conversion(tc,"TC")
te <- NA
tl <- NA
countries = unique((ta$COUNTRY))
if (length(countries) > 1) { # in case the dataset mixes different countries stop the process
res$status <- 400
stop('Dataset contains data from multiple countries.')
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
################ NON MODIFICARE #############
if (countries[1] %in% c('BGR', 'ROU'))  {
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=wd,
zip=FALSE,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
} else {
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=wd,
zip=FALSE,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages,
assTL=assTL)
}
prefix <- 'Critical' # In case there are critical errors return error code to stop the upload process
if (fileExistsWithPrefix(wd, prefix)) {
res$status <- 424
stop('Referential integrity problems with TA, TB and TC tables (missing records).')
}
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test/Test_RoMEcc.R")
M
# DataTC = read.csv("~/GitHub/RoME/data/TC_GSA18_1994-2018.csv", sep=";")
DataTC <- RoME::TC
DataTC
#library(MEDITS)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB3\\test"
Specieslist=NA
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
# DataTC = read.csv("~/GitHub/RoME/data/TC_GSA18_1994-2018.csv", sep=";")
DataTC <- RoME::TC
year=2007
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTC <- DataTC[DataTC$YEAR == year, ]
ResultData = DataTC
write(paste("\n----------- check correctness of LENGTH_CLASSES_CODE in TC - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
if (class(Specieslist) != "data.frame"){
if (all(is.na(Specieslist))){
Specieslist = RoME::TM_list
}
}
RoME::TM_list
(nrow(ResultData)!=0)
1:nrow(ResultData)
FoundSpecies=ResultSpecies[as.character(ResultSpecies$MeditsCode)==paste(as.character(ResultData$GENUS[j]),as.character(ResultData$SPECIES[j]),sep=""),]
ResultSpecies <- Specieslist
FoundSpecies=ResultSpecies[as.character(ResultSpecies$MeditsCode)==paste(as.character(ResultData$GENUS[j]),as.character(ResultData$SPECIES[j]),sep=""),]
(nrow(FoundSpecies)!=0)
(!is.na(FoundSpecies$CODLON[1]) & FoundSpecies$CODLON[1]!="")
(as.character(FoundSpecies$CODLON[1])!=as.character(ResultData$LENGTH_CLASSES_CODE[j]))
if (nrow(ResultData)!=0){
j=2161
for (j in 1:nrow(ResultData)){
FoundSpecies=ResultSpecies[as.character(ResultSpecies$MeditsCode)==paste(as.character(ResultData$GENUS[j]),as.character(ResultData$SPECIES[j]),sep=""),]
if (nrow(FoundSpecies)!=0){
if (!is.na(FoundSpecies$CODLON[1]) & FoundSpecies$CODLON[1]!=""){
if (as.character(FoundSpecies$CODLON[1])!=as.character(ResultData$LENGTH_CLASSES_CODE[j]))   {
write(paste("Haul",ResultData$HAUL_NUMBER[j],", code species", as.character(ResultData$GENUS[j]) , as.character(ResultData$SPECIES[j]) ,"wrong LENGTH_CLASSES_CODE according to MEDITS FM list in Tables directory"), file = Errors, append = TRUE)
numberError = numberError+1
print(j)
}
} else {
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[j],", code species", as.character(ResultData$GENUS[j]) , as.character(ResultData$SPECIES[j]) ," CODELON not specified in TM list."), file = Errors, append = TRUE)
}
} else {
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[j],", code species", as.character(ResultData$GENUS[j]) , as.character(ResultData$SPECIES[j]) ," species not present in TM list: LENGTH_CLASSES_CODE not verified."), file = Errors, append = TRUE)
}
}
}
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test/Test_RoMEcc.R")
tc[tc$HAUL_NUMBER==76 & tc$GENUS=="ENGR" &tc$YEAR==2021, ]
tm <- RoME::TM_list
tm[tm$MeditsCode =="ENGR ENC",]
tm[tm$MeditsCode =="ENGRENC",]
tc[tc$HAUL_NUMBER==76 & tc$GENUS=="ENGR" &tc$YEAR==2021, "LENGTH_CLASS_CODE"]
tc[tc$HAUL_NUMBER==76 & tc$GENUS=="ENGR" &tc$YEAR==2021, ]
RoME::TC$LENGTH_CLASSES_CODE
tc[tc$HAUL_NUMBER==76 & tc$GENUS=="ENGR" &tc$YEAR==2021, "LENGTH_CLASSES_CODE"]
unique(tc[, "LENGTH_CLASSES_CODE"])
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/______ MEDITS DATA __OFFICIAL___/MEDBSsurvey/Demersal"
GSA <- 18
years <- c(2021,2023) #sort(unique(ta$YEAR))  #c(2017,2018)
# # load TX tables for a unique GSA per time
wd <- "D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(ta)
tb <- read.table(file=paste(filedir, "\\TB_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(tb)
tc <- read.table(file=paste(filedir, "\\TC_MEDITS_FORMAT_2025.csv",sep=""), sep=";", header=T)
head(tc)
tc$TYPE_OF_FILE ="TC"
ta$SHOOTING_TIME <- as.integer(ta$SHOOTING_TIME)
ta$SHOOTING_DEPTH <- as.integer(ta$SHOOTING_DEPTH)
ta$HAULING_TIME <- as.integer(ta$HAULING_TIME)
ta$HAULING_DEPTH <- as.integer(ta$HAULING_DEPTH)
ta$DISTANCE <- as.integer(ta$DISTANCE)
ta$VERTICAL_OPENING <- as.integer(ta$VERTICAL_OPENING)
ta$WING_OPENING <- as.integer(ta$WING_OPENING)
ta$WARP_LENGTH <- as.integer(ta$WARP_LENGTH)
ta$OBSERVATIONS <- as.integer(ta$OBSERVATIONS)
tb$TOTAL_WEIGHT_IN_THE_HAUL  <- as.integer(tb$TOTAL_WEIGHT_IN_THE_HAUL)
tc$WEIGHT_OF_THE_FRACTION  <- as.integer(tc$WEIGHT_OF_THE_FRACTION)
tc$WEIGHT_OF_THE_SAMPLE_MEASURED    <- as.integer(tc$WEIGHT_OF_THE_SAMPLE_MEASURED )
tc$LENGTH_CLASS  <- as.integer(tc$LENGTH_CLASS)
tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE    <- as.integer(tc$NUMBER_OF_INDIVIDUALS_IN_THE_LENGTH_CLASS_AND_MATURITY_STAGE)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
checkHeader(ta,"TA",wd=wd,suffix=suffix)
checkHeader(tb,"TB",wd=wd,suffix=suffix)
checkHeader(tc,"TC",wd=wd,suffix=suffix)
# colnames(ta) <- colnames(RoME::TA)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# ta$BOTTOM_SALINITY_BEGINNING <- 15
# ta$BOTTOM_SALINITY_END <- 15
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=TRUE
################ NON MODIFICARE #############
install.packages("profvis")
library(profvis)
profvis({
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
Rprof(NULL)
})
Rprof("prof.out", interval = 0.01)
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
Rprof(NULL)
pr <- summaryRprof("prof.out")$by.self
head(pr[order(-pr$self.time), ], 10)
source("~/.active-rstudio-document")
source("~/GitHub/RoME/R/check_dictionary.r")
library(profvis)
profvis({
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
Rprof(NULL)   })
Rprof("prof.out", interval = 0.01)
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
Rprof(NULL)
pr <- summaryRprof("prof.out")$by.self
head(pr[order(-pr$self.time), ], 10)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test/Test_RoMEcc.R")
ta$COURSE[1] <- "G"
suffix <- "OLD_check_dictionary"
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
suffix <- "OLD_check_dictionary_profvis"
profvis({
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
Rprof(NULL)   })
suffix <- "OLD_check_dictionary_Rprof"
Rprof("prof.out", interval = 0.01)
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
Rprof(NULL)
pr <- summaryRprof("prof.out")$by.self
head(pr[order(-pr$self.time), ], 10)
check_dictionary
check_dictionary()
check_dictionary
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test/Test_RoMEcc.R")
ta$COURSE <- "G"
tb$FAUNISTIC_CATEGORY <- "Ax"
tc$SEX <- "G"
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB3/test/Test_RoMEcc.R")
library(profvis)
suffix <- "OLD_check_dictionary_profvis"
profvis({
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
Rprof(NULL)   })
check_dictionary
library(RoME)
check_dictionary
