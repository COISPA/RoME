points_start <- data.frame(lon=ResultData[j,"SHOOTING_LONGITUDE"],lat=ResultData[j,"SHOOTING_LATITUDE"], Position ="start")
points_end <- data.frame(lon=ResultData[j,"HAULING_LONGITUDE"],lat=ResultData[j,"HAULING_LATITUDE"], Position ="end")
points <- rbind(points_start,points_end)
world <- ne_countries(scale = "medium", returnclass = "sf")
class(world)
if (ratio <= 0.5) {
text_size <- 12
point_size <- 2
legend_title_size <- 12
legend_text_size <-  11
title_text_size <- 16
} else if (ratio >= 0.5 & ratio < 2 ) {
text_size <- 20
point_size <- 3.5
legend_title_size <- 18
legend_text_size <-  18
title_text_size <- 22
} else if (ratio >= 2 ) {
text_size <- 40
point_size <- 6
legend_title_size <- 30
legend_text_size <-  30
title_text_size <- 40
}
theme_opts<-list(theme(text = element_text(size=text_size),
plot.title = element_text(size=title_text_size),
legend.title = element_text(size = legend_title_size),
legend.text = element_text(size = legend_text_size),
panel.background = element_rect(fill = 'light blue',linetype="solid",color="black"),
panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
suppressMessages (
ggplot(data=world) +
geom_sf()+
coord_sf(crs ="+proj=longlat +ellps=WGS84") +
geom_point(data=points, aes(lon, lat, fill=Position),shape=21,color="black",size=point_size) +
coord_sf(xlim = c(min(ResultData$SHOOTING_LONGITUDE)-0.1, max(ResultData$SHOOTING_LONGITUDE)+0.1),
ylim = c(min(ResultData$SHOOTING_LATITUDE)-0.1, max(ResultData$SHOOTING_LATITUDE)+0.1),crs="+proj=longlat +ellps=WGS84")+
ggtitle(paste("Haul",ResultData[j,"HAUL_NUMBER"],"-",ResultData[j,"YEAR"]))  +
theme_opts +
scale_fill_manual(values=c("green", "blue"))
)
# tiff(file.path(wd,"Graphs",paste("haul ", ResultData[j,"HAUL_NUMBER"], " AREA ",ResultData[1,"AREA"],"_",ResultData[1,"YEAR"],".tiff",sep="")),
#      width=img_width, height=img_height,
#      bg="white", units="in", res=300,pointsize = 1/300, compression = "lzw")
# print(p)
ggsave(file.path(wd,"Graphs",paste("haul ", ResultData[j,"HAUL_NUMBER"], " AREA ",ResultData[1,"AREA"],"_",ResultData[1,"YEAR"],".jpeg",sep="")),width=img_width, height=img_height,dpi = 300, units="in")
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
?jpeg
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
library(RoME)
ResultDataTA= ta #RoME::TA
year
oldpar <- par(no.readonly = TRUE)
oldpar$mfrow <- par()$mfrow
oldpar$mai <- par()$mai
oldpar$omi <- par()$omi
on.exit(par(mfrow=oldpar$mfrow, omi=oldpar$omi, mai=oldpar$mai))
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultDataTA <- ResultDataTA[ResultDataTA$YEAR == year, ]
Dataset = ResultDataTA[ResultDataTA$VALIDITY =="V", ]
write(paste("\n----------- check temperature - ",Dataset$YEAR[1]), file = Errors, append = TRUE)
temps <- data.frame(
HAUL_NUMBER=Dataset$HAUL_NUMBER,BOTTOM_TEMPERATURE_BEGINNING=as.numeric(Dataset$BOTTOM_TEMPERATURE_BEGINNING),
BOTTOM_TEMPERATURE_END=as.numeric(Dataset$BOTTOM_TEMPERATURE_END), MEAN_TEMP = NA,
DEPTH=rowMeans(Dataset[ , which(colnames(Dataset) %in% c("SHOOTING_DEPTH","HAULING_DEPTH"))],
na.rm=TRUE))
t=1
for (t in 1:nrow(temps)) {
if (!all(is.na(temps[t,c(2:3)]))) {
temps$MEAN_TEMP[t] <- rowMeans(temps[t,c(2:3)], na.rm = TRUE)
} else {
temps$MEAN_TEMP[t] <- NA
}
}
temps <- temps[!is.na(temps$MEAN_TEMP),]
if (!all(is.na(Dataset$BOTTOM_TEMPERATURE_BEGINNING))){
start_temp <- data.frame(HAUL_NUMBER=Dataset$HAUL_NUMBER,BOTTOM_TEMPERATURE_BEGINNING=as.numeric(Dataset$BOTTOM_TEMPERATURE_BEGINNING))
if (all(is.na(Dataset$BOTTOM_TEMPERATURE_END))) {
end_temp <- start_temp
}
}
if (!all(is.na(Dataset$BOTTOM_TEMPERATURE_END))){
end_temp <- data.frame(HAUL_NUMBER=Dataset$HAUL_NUMBER,BOTTOM_TEMPERATURE_END=as.numeric(Dataset$BOTTOM_TEMPERATURE_END))
if (all(is.na(Dataset$BOTTOM_TEMPERATURE_BEGINNING))) {
start_temp <- end_temp
}
}
# if (exists("start_temp")){
# if (!is.na(start_temp)){
if (nrow(temps[!is.na(temps$BOTTOM_TEMPERATURE_BEGINNING),]) > 0 ){
indices_start = which(!is.na(temps[,"BOTTOM_TEMPERATURE_BEGINNING"]))
start_temp  <- temps[indices_start,]
for (i in 1:nrow(start_temp)){
# check beginning temperature
if((start_temp[i,2] > 30) | (start_temp[i,2] < 10)){
write(paste("Warning: Haul",start_temp[i,1], ": the beginning temperature is out of the range (10,30) in",  Dataset$TYPE_OF_FILE[1]), file = Errors, append = TRUE)
# numberError = numberError +1
}
}
}
# if (exists("end_temp")) {
# if (!is.na(end_temp)) {
if (nrow(temps[!is.na(temps$BOTTOM_TEMPERATURE_END),]) > 0 ){
indices_end = which(!is.na(temps[,"BOTTOM_TEMPERATURE_END"]))
end_temp  <- temps[indices_end,]
for (j in 1:nrow(end_temp)){
# check end temperature
if((end_temp[j,3] > 30) | (end_temp[j,3] < 10)){
write(paste("Warning: Haul",end_temp[j,1], ": the end temperature is out of the range (10,30) in",  Dataset$TYPE_OF_FILE[1]), file = Errors, append = TRUE)
# numberError = numberError + 1
}
}
}
#   if (exists("start_temp") & exists("end_temp")){
#   if (!is.na(start_temp) & !is.na(end_temp)){
if (nrow(temps)>0){
# tiff(filename=file.path(wd,"Graphs",paste("temperature_control_", Dataset$YEAR[1], "_AREA_",Dataset$AREA[1],".tiff",sep="")),width=12, height=8, bg="white", units="in", res=300, compression = 'lzw', pointsize = 1/300)
jpeg(filename=file.path(wd,"Graphs",paste("temperature_control_", Dataset$YEAR[1], "_AREA_",Dataset$AREA[1],".jpeg",sep="")),width=12, height=8, bg="white", units="in", quality=100)
par( mfrow=c(1,1), mai=c(0.8,0.8,0.8,0.3), omi=c(0.8,0.8,0.8,0.8)) #
X= temps$DEPTH
Y= temps$MEAN_TEMP
#plot(X,Y,xlab="Mean depth (m)",ylab="Mean temperature (?C)",col="blue",pch=16)
plot(X,Y,xlab="Mean depth (m)",ylab="Mean temperature (Celsius)",col="blue",pch=16,main=paste("Temperature data - ", Dataset$YEAR[1]))
#mtext("Shooting depth",side=1)
text(X+0.1,Y,labels=Dataset$HAUL_NUMBER)
dev.off()
write("Temperature check: see the graphs automatically generated in Graphs directory", file = Errors, append = TRUE)
}
# tiff(filename=file.path(wd,"Graphs",paste("temperature_control_", Dataset$YEAR[1], "_AREA_",Dataset$AREA[1],".tiff",sep="")),width=12, height=8, bg="white", units="in", res=300, compression = 'lzw', pointsize = 1/300)
jpeg(filename=file.path(wd,"Graphs",paste("temperature_control_", Dataset$YEAR[1], "_AREA_",Dataset$AREA[1],".jpeg",sep="")),width=12, height=8, bg="white", units="in",res=300, quality=100)
par( mfrow=c(1,1), mai=c(0.8,0.8,0.8,0.3), omi=c(0.8,0.8,0.8,0.8)) #
X= temps$DEPTH
Y= temps$MEAN_TEMP
#plot(X,Y,xlab="Mean depth (m)",ylab="Mean temperature (?C)",col="blue",pch=16)
plot(X,Y,xlab="Mean depth (m)",ylab="Mean temperature (Celsius)",col="blue",pch=16,main=paste("Temperature data - ", Dataset$YEAR[1]))
#mtext("Shooting depth",side=1)
text(X+0.1,Y,labels=Dataset$HAUL_NUMBER)
dev.off()
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc_RDBFIS.R", echo=TRUE)
#######################
#  CREAZIONE MANUALE  #
#######################
devtools::build_manual(pkg = ".", path = NULL)
ta <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/_CONDIVISA con COSMIDANO_/RoME_2022/CHECK_WZ_CN/TA.csv", sep=";")
View(ta)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc.R", echo=TRUE)
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\_CONDIVISA con COSMIDANO_\\RoME_2022\\CHECK_WZ_CN"
suffix=NA  # non modificare
ta <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/_CONDIVISA con COSMIDANO_/RoME_2022/CHECK_WZ_CN/TA.csv", sep=";")
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc.R", echo=TRUE)
tb
class(ta$YEAR)
class(tb$YEAR)
class(tc$YEAR)
unique(ta$YEAR)
ta <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/_CONDIVISA con COSMIDANO_/RoME_2022/CHECK_WZ_CN/TA.csv", sep=";")
ta
unique(ta$YEAR)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/Test_RoMEcc.R", echo=TRUE)
?RoMEcc
RoMEcc(TA,TB,TC,TE=NA,TL=NA,wd,suffix=NA,
verbose =TRUE,Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,
ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL)
RoMEcc(TA,TB,TC,TE=NA,TL=NA,wd=wd(),suffix=NA,
verbose =TRUE,Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,
ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL)
tempdir()
RoMEcc(TA,TB,TC,TE=NA,TL=NA,wd=tempdir(),suffix=NA,
verbose =TRUE,Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,
ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL)
ENV <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/SEAwise/_appoggio_/Variabili_isa/ENV_data_GSA171819_(1987_2021).csv", sep=";")
View(ENV)
unique(ENV$strata)
colnames(ENV)
View(ENV)
library(dplyr)
ENV[ENV$depth >0 & END$depth <= 50, "strata"] <- "0-50"
ENV <- read.csv("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/SEAwise/_appoggio_/Variabili_isa/ENV_data_GSA171819_(1987_2021).csv", sep=";")
colnames(ENV)
View(ENV)
library(dplyr)
ENV[ENV$depth >0 & END$depth <= 50, "strata"] <- "0-50"
ENV[ENV$depth >50 & END$depth <= 100, "strata"] <- "50-100"
ENV[ENV$depth >100 & END$depth <= 200, "strata"] <- "100-200"
ENV[ENV$depth >200 & END$depth <= 500, "strata"] <- "200-500"
ENV[ENV$depth >500 & END$depth <= 800, "strata"] <- "500-800"
ENV[ENV$depth >0 & ENV$depth <= 50, "strata"] <- "0-50"
ENV[ENV$depth >50 & ENV$depth <= 100, "strata"] <- "50-100"
ENV[ENV$depth >100 & ENV$depth <= 200, "strata"] <- "100-200"
ENV[ENV$depth >200 & ENV$depth <= 500, "strata"] <- "200-500"
ENV[ENV$depth >500 & ENV$depth <= 800, "strata"] <- "500-800"
unique(END$strata)
unique(ENV$strata)
tab <- ENV %>% group_by(gsa,strata,YEAR) %>% summarise(sst=mean(sst,na.rm=TRUE),botT=mean(botT,na.rm=TRUE),so=mean(so,na.rm=TRUE),botso=mean(botso,na.rm=TRUE),nppv=mean(nppv,na.rm=TRUE))
tab
ENV$quarter <- NA
ENV[ENV$month >0 & ENV$depth <= 3, "quarter"] <- 1
ENV[ENV$month >4 & ENV$depth <= 6, "quarter"] <- 2
ENV[ENV$month >7 & ENV$depth <= 9, "quarter"] <- 3
ENV[ENV$month >10 , "quarter"] <- 4
View(ENV)
ENV$quarter <- NA
ENV[ENV$month >0 & ENV$depth <= 3, "quarter"] <- 1
ENV$month
ENV$quarter <- NA
ENV[ENV$MONTH >0 & ENV$MONTH <= 3, "quarter"] <- 1
ENV[ENV$MONTH >4 & ENV$MONTH <= 6, "quarter"] <- 2
ENV[ENV$MONTH >7 & ENV$MONTH <= 9, "quarter"] <- 3
ENV[ENV$MONTH >10 , "quarter"] <- 4
ENV$MONTH
ENV$quarter
ENV[ENV$MONTH >0 & ENV$MONTH <= 3, "quarter"]
ENV[ENV$MONTH >4 & ENV$MONTH <= 6, "quarter"]
ENV[ENV$MONTH >7 & ENV$MONTH <= 9, "quarter"]
ENV[ENV$MONTH >10 , "quarter"] <- 4
ENV$quarter <- NA
ENV[ENV$MONTH >0 & ENV$MONTH <= 3, "quarter"] <- 1
ENV[ENV$MONTH >=4 & ENV$MONTH <= 6, "quarter"] <- 2
ENV[ENV$MONTH >=7 & ENV$MONTH <= 9, "quarter"] <- 3
ENV[ENV$MONTH >=10 , "quarter"] <- 4
ENV$quarter
unique(ENV$quarter+)
unique(ENV$quarter)
tab <- ENV %>% group_by(gsa,strata,YEAR,quarter) %>% summarise(sst=mean(sst,na.rm=TRUE),botT=mean(botT,na.rm=TRUE),so=mean(so,na.rm=TRUE),botso=mean(botso,na.rm=TRUE),nppv=mean(nppv,na.rm=TRUE))
tab
# visualizzo
View(ENV)
# effettuo l'aggregazione dei dati ambientali a seconda delle esigenze (e.g. gsa, strata, year, quarter)
tab2 <- ENV %>% group_by(gsa,strata,YEAR,quarter) %>% summarise(sst=mean(sst,na.rm=TRUE),botT=mean(botT,na.rm=TRUE),so=mean(so,na.rm=TRUE),botso=mean(botso,na.rm=TRUE),nppv=mean(nppv,na.rm=TRUE))
tab2 <- tab2[tab2$gsa ==17, ]
tab2
library(RoME)
?RoME
?RoMEcc
library(devtools)
install_github("COISPA/RoME")
library(devtools)
install_github("COISPA/RoME")
?RoME
library(RoME)
?RoME
library(devtools)
install_github("COISPA/RoME")
library(devtools)
install_github("COISPA/RoME",force = TRUE)
install.packages("~/GitHub/RoME_0.1.22.zip", repos = NULL, type = "win.binary")
ta <- read.csv(file.path(filedir,"medits_ta.csv"), sep=";")
wd <- resdir
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\Workshop 2\\RoME\\Results"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\Workshop 2\\dati\\MEDITS"
GSA <- 20
years <- 2021
ta <- read.csv(file.path(filedir,"medits_ta.csv"), sep=";")
year <- 2021
ta <- read.csv(file.path(filedir,"medits_ta.csv"), sep=";")
# wd <- resdir
# suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
# DataTA = RoME::TA
# year=2012
graphs_TA(DataTA,year, wd, suffix)
library(RoME)
# wd <- resdir
# suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
# DataTA = RoME::TA
# year=2012
graphs_TA(DataTA,year, wd, suffix)
# wd <- resdir
# suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
# DataTA = RoME::TA
# year=2012
graphs_TA(ta,year, wd, suffix)
DataTA=ta
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTA <- DataTA[DataTA$YEAR == year, ]
oldoptions <- options()$warn
old_par <- list()
old_par$mfrow <- par()$mfrow
old_par$mar <-par()$mar
old_par$fin <-par()$fin
old_par$mai <- par()$mai
old_par$omi <- par()$omi
on.exit(c(par(mfrow=old_par$mfrow,mar=old_par$mar,fin=old_par$fin,mai=old_par$mai,omi=old_par$omi),options(warn=oldoptions)))
options(warn=-1)
suppressWarnings(
{
ResultData = DataTA #read.csv(paste(DataTA,".csv",sep=""), sep=";", header=TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
# tiff(filename=file.path(wd,"Graphs",paste("qualitative_control_TA_", ResultData$YEAR[1], "_AREA_",ResultData$AREA[1],".tif",sep="")),width=8, height=12, bg="white", units="in", res=300, compression = 'lzw', pointsize = 1/300)
jpeg(filename=file.path(wd,"Graphs",paste("qualitative_control_TA_", ResultData$YEAR[1], "_AREA_",ResultData$AREA[1],".jpeg",sep="")),width=8, height=12, bg="white", units="in", res=200,quality=80)
par(mfrow=c(2,1), mai=c(0.3,0.8,0.8,0.3), omi=c(0.8,0.8,1,0.8))
X=ResultData$SHOOTING_DEPTH
Y=ResultData$WARP_LENGTH
plot(X,Y,xlab="Shooting depth",ylab="Warp length",col="blue",pch=16,main = paste("Shooting depth versus Warp length- ",ResultData$YEAR[1]))
mtext(paste("Shooting depth"),side=1)
text(X+0.1,Y,labels=ResultData$HAUL_NUMBER)
Z=Y
H=ResultData$WING_OPENING
plot(Z,H,xlab="Warp length",ylab="Wing opening",col="green",pch=16,main = paste("Warp length versus Wing opening - ",ResultData$YEAR[1]))
text(Z+0.1,H,labels=ResultData$HAUL_NUMBER)
mtext(paste("Warp length"),side=1)
dev.off()
}
)
ResultData = DataTA #read.csv(paste(DataTA,".csv",sep=""), sep=";", header=TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData
DataTA
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\Workshop 2\\RoME\\Results"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB\\Workshop 2\\dati\\MEDITS"
GSA <- 20
year <- 2021
ta <- read.csv(file.path(filedir,"medits_ta.csv"), sep=";")
ta
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTA
# wd <- resdir
# suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
DataTA = ta
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTA
DataTA <- DataTA[DataTA$YEAR == year, ]
DataTA
# wd <- resdir
# suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
DataTA = ta
unique(ta$year)
ta <- read.csv(file.path(filedir,"medits_ta.csv"), sep=";")
ta <- headers.conversion(ta,"TA")
ta
# wd <- resdir
# suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
DataTA = ta
# year=2012
graphs_TA(DataTA=ta,year, wd, suffix)
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTA
DataTA <- DataTA[DataTA$YEAR == year, ]
DataTA
oldoptions <- options()$warn
old_par <- list()
old_par$mfrow <- par()$mfrow
old_par$mar <-par()$mar
old_par$fin <-par()$fin
old_par$mai <- par()$mai
old_par$omi <- par()$omi
on.exit(c(par(mfrow=old_par$mfrow,mar=old_par$mar,fin=old_par$fin,mai=old_par$mai,omi=old_par$omi),options(warn=oldoptions)))
options(warn=-1)
ResultData = DataTA #read.csv(paste(DataTA,".csv",sep=""), sep=";", header=TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData
par(mfrow=c(2,1), mai=c(0.3,0.8,0.8,0.3), omi=c(0.8,0.8,1,0.8))
X=ResultData$SHOOTING_DEPTH
Y=ResultData$WARP_LENGTH
plot(X,Y,xlab="Shooting depth",ylab="Warp length",col="blue",pch=16,main = paste("Shooting depth versus Warp length- ",ResultData$YEAR[1]))
mtext(paste("Shooting depth"),side=1)
text(X+0.1,Y,labels=ResultData$HAUL_NUMBER)
Z=Y
H=ResultData$WING_OPENING
plot(Z,H,xlab="Warp length",ylab="Wing opening",col="green",pch=16,main = paste("Warp length versus Wing opening - ",ResultData$YEAR[1]))
text(Z+0.1,H,labels=ResultData$HAUL_NUMBER)
mtext(paste("Warp length"),side=1)
jpeg(filename=file.path(wd,"Graphs",paste("qualitative_control_TA_", ResultData$YEAR[1], "_AREA_",ResultData$AREA[1],".jpeg",sep="")),width=8, height=12, bg="white", units="in", res=200,quality=80)
par(mfrow=c(2,1), mai=c(0.3,0.8,0.8,0.3), omi=c(0.8,0.8,1,0.8))
X=ResultData$SHOOTING_DEPTH
Y=ResultData$WARP_LENGTH
plot(X,Y,xlab="Shooting depth",ylab="Warp length",col="blue",pch=16,main = paste("Shooting depth versus Warp length- ",ResultData$YEAR[1]))
mtext(paste("Shooting depth"),side=1)
text(X+0.1,Y,labels=ResultData$HAUL_NUMBER)
Z=Y
H=ResultData$WING_OPENING
plot(Z,H,xlab="Warp length",ylab="Wing opening",col="green",pch=16,main = paste("Warp length versus Wing opening - ",ResultData$YEAR[1]))
text(Z+0.1,H,labels=ResultData$HAUL_NUMBER)
mtext(paste("Warp length"),side=1)
dev.off()
