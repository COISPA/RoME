checkName = "Check Headers TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,table, "in progress..."), quote = FALSE)}
check_without_errors =   checkHeader(TE,"TE",wd,suffix)
if (headers_without_error){
headers_without_error <- check_without_errors
}
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
ResultDataTE_bkp <- TE
}
###  TL  ###
if (!(all(is.na(TL)) & length(TL)==1))
{
table <- "TL"
checkName = "Check Headers TL"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,table, "in progress..."), quote = FALSE)}
check_without_errors =   checkHeader(TL,"TL",wd,suffix)
if (headers_without_error){
headers_without_error <- check_without_errors
}
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
ResultDataTL_bkp <- TL
}
###########
### CHECK CLASS
### TA
table <- "TA"
checkName = "Check CLASS"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,table, "in progress..."), quote = FALSE)}
check_without_errors =   check_class(data=TA,tab="TA",wd=wd,suffix=suffix)
if (class_without_error){
class_without_error <- check_without_errors
}
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
### TB
table <- "TB"
checkName = "Check CLASS"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,table, "in progress..."), quote = FALSE)}
check_without_errors =   check_class(data=TB,tab="TB",wd=wd,suffix=suffix)
if (class_without_error){
class_without_error <- check_without_errors
}
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
### TC
table <- "TC"
checkName = "Check CLASS"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,table, "in progress..."), quote = FALSE)}
check_without_errors =   check_class(data=TC,tab="TC",wd=wd,suffix=suffix)
if (class_without_error){
class_without_error <- check_without_errors
}
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
### TE
if (!(all(is.na(TE)) & length(TE)==1))
{
table <- "TE"
checkName = "Check CLASS"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,table, "in progress..."), quote = FALSE)}
check_without_errors =   check_class(data=TE,tab="TE",wd=wd,suffix=suffix)
if (class_without_error){
class_without_error <- check_without_errors
}
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
### TL
if (!(all(is.na(TL)) & length(TL)==1))
{
table <- "TL"
checkName = "Check CLASS"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,table, "in progress..."), quote = FALSE)}
check_without_errors =   check_class(data=TL,tab="TL",wd=wd,suffix=suffix)
if (class_without_error){
class_without_error <- check_without_errors
}
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
#################
### CHECK YEAR
years = sort(unique (TA$YEAR))
table <- "ALL"
checkName = "Check YEAR"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName, "in progress..."), quote = FALSE)}
check_without_errors = check_year(TA, TB, TC, TE, TL, years, wd, Errors)
year_without_error <- check_without_errors
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
### CHECK TYPE_OF_FILE
if (year_without_error){
checkName = "Check TYPE_OF_FILE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName, "in progress..."), quote = FALSE)}
check_without_errors = check_type(TA, TB, TC, TE, TL, years, wd, Errors)
TYPE_OF_FILE_without_error <- check_without_errors
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
(class_without_error & year_without_error & TYPE_OF_FILE_without_error)
yea <- years[1]
yea
cat(paste0("\n########################"))
cat(paste0("\n###       ",yea,"       ###"))
cat(paste0("\n########################"))
if (check_without_errors == TRUE & verbose==TRUE) {
print(paste("Checking year ",yea ),quote=F)
}
ResultDataTA <-ResultDataTA_bkp[ResultDataTA_bkp$YEAR == yea,]
ResultDataTB <-ResultDataTB_bkp[ResultDataTB_bkp$YEAR == yea,]
ResultDataTC <-ResultDataTC_bkp[ResultDataTC_bkp$YEAR == yea,]
if (!(all(is.na(TE)) & length(TE)==1))
{
ResultDataTE <- ResultDataTE_bkp[ResultDataTE_bkp$YEAR==yea,]
} else {
ResultDataTE <- NA
}
if (!(all(is.na(TL)) & length(TL)==1))
{
ResultDataTL <- ResultDataTL_bkp[ResultDataTL_bkp$YEAR==yea,]
} else {
ResultDataTL <- NA
}
# --------------------------------
# Check identical records
table <- "TA"
checkName = "Check identical record TA"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_identical_records(Data=ResultDataTA, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TB"
checkName= "Check identical record TB"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_identical_records(Data=ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC"
checkName = "Check identical record TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_identical_records(Data=ResultDataTC,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TE"
if (!(all(is.na(TE)) & length(TE)==1))
{
if (nrow(ResultDataTE)>0){
checkName = "Check identical record TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_identical_records(Data=ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
table <- "TL"
if (!(all(is.na(TL)) & length(TL)==1))
{
if (nrow(ResultDataTL)>0){
checkName = "Check identical record TL"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_identical_records(Data=ResultDataTL,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
# --------------------------------
# Check quasi-identical record
table <- "TA"
checkName = "Check quasi-identical record in TA"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName, "in progress..."), quote = FALSE)}
check_without_errors = check_quasiidentical_records(ResultDataTA,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TB"
checkName = "Check quasi-identical record in TB"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_quasiidentical_records(ResultDataTB,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TC"
checkName = "Check quasi-identical record in TC"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_quasiidentical_records(ResultDataTC,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TE"
if (!(all(is.na(TE)) & length(TE)==1))
{
if (nrow(ResultDataTE)>0){
checkName = "Check quasi-identical record in TE"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_quasiidentical_records(ResultDataTE,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
table <- "TL"
if (!(all(is.na(TL)) & length(TL)==1))
{
if (nrow(ResultDataTL)>0){
checkName = "Check quasi-identical record in TL"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = check_quasiidentical_records(ResultDataTL,year=yea,wd,suffix)
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
}
}
table <- "ALL"
checkName = "Check consistency of area TA, TB, TC, TE, TL"
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,"in progress..."), quote = FALSE)}
check_without_errors = suppressWarnings(check_area(ResultDataTA, ResultDataTB, ResultDataTC, ResultDataTE, ResultDataTL, year=yea, wd, suffix))
}
if(verbose){stop_ = printError_cc(checkName,check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
minutes <- c("00","01","02","03","04","05","06","07","08","09", as.character(seq(10,59,1)))
h=0
for (h in 0:23) {
ht <- as.integer(paste(h, minutes,sep=""))
if (h==0){
time=minutes
} else {
time <- as.integer(c(t,ht))
}
}
#TA
table <- "TA"
checkName = "Check dictionary"
Field = "COUNTRY"
as.character(unique(Stratification$COUNTRY))
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,Field,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData = ResultDataTA, Field, Values, year=yea, wd, suffix)
}
Values = as.character(unique(Stratification$COUNTRY))
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,Field,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData = ResultDataTA, Field, Values, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(paste(checkName,Field),check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
table <- "TA"
checkName = "Check dictionary"
Field = "AREA"
Values = as.character(unique(Stratification$GSA))
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,Field,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData = ResultDataTA, Field, Values, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(paste(checkName,Field),check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
as.character(unique(Stratification$GSA))
Field = "GEAR"
Values = c("GOC73")
if (check_without_errors == TRUE) {
if(verbose){print(paste(checkName,Field,"in progress..."), quote = FALSE)}
check_without_errors = check_dictionary(ResultData = ResultDataTA, Field, Values, year=yea, wd, suffix)
}
if(verbose){stop_ = printError_cc(paste(checkName,Field),check_without_errors, stop_)}
check.list <- error.table(check.df,check_without_errors,check_without_warnings,checkName,table,Field,yea)
check.df <- check.list[[1]]
check_without_errors <- check.list[[2]]
check_without_warnings <- check.list[[3]]
ResultDataTA
source("~/GitHub/RoME/R/RoMEBScc.r", echo=TRUE)
library(RoME)
library(RoME)
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
GSA <- 29
years <- c(2014,2014)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(wd, "\\TB_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=",", header=T)
tc <- read.table(file=paste(wd, "\\TC_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years, ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years, ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years, ]
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
GSA <- 29
COUNTRY <- "BGR"
GENUS <- "PSET"
SPECIES <- "MAX"
years <- c(2014,2014)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(wd, "\\TB_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=",", header=T)
tc <- read.table(file=paste(wd, "\\TC_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(wd, "\\TB_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(wd, "\\TC_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
ta[ta$AREA==GSA & ta$YEAR %in% years & ta$COUNTRY %in% COUNTRY, ]
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
GSA <- 29
COUNTRY <- "BGR"
GENUS <- "PSET"
SPECIES <- "MAX"
years <- c(2014,2014)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(wd, "\\TB_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(wd, "\\TC_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years & ta$COUNTRY %in% COUNTRY, ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years & tb$GENUS %in% GENUS & tb$SPECIES %in% SPECIES, ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years & tc$GENUS %in% GENUS & tc$SPECIES %in% SPECIES, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
library(RoME)
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
GSA <- 29
COUNTRY <- "BGR"
GENUS <- "PSET"
SPECIES <- "MAX"
years <- c(2014,2014)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\BS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
str(ta)
library(RoME)
minutes <- c("00","01","02","03","04","05","06","07","08","09", as.character(seq(10,59,1)))
h=0
for (h in 0:23) {
ht <- as.integer(paste(h, minutes,sep=""))
if (h==0){
time=minutes
} else {
time <- as.integer(c(t,ht))
}
}
minutes
time
class(time)
#----------------------
save(time,file="data/time.rda",compress="xz",compression_level=9)
setwd("~/GitHub/RoME")
