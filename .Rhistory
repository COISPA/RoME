setwd("D:\\COISPA\\B-USEFUL\\_MEDITS_Corrected_data_")
# # MERGE TA FILES FROM ALL GSAs
ta.files <- list.files(pattern="TA.*?\\.csv") # list all csv files that start with "TA"
ta.files
ta_list <- lapply(ta.files, function(x) {read.csv(x, sep = ";", dec='.', header = T)}) # read them all at once into a list
ta <- ldply(ta_list, data.frame) # merge into single dataframe
ta<-ta[ta$VALIDITY=='V',] # only keep valid hauls
ta <- ta[ta$AREA %in% c(9,10,11,16,17,18,19)]
ta <- ta[ta$AREA %in% c(9,10,11,16,17,18,19),]
ta
ta2 <- BioIndex::MEDITS.to.dd(ta)
ta2
ta2 <- ta2[ta2$COUNTRY %in% c("ITA"), ]
plot(ta2$SHOOTING_LONGITUDE,ta2$SHOOTING_LATITUDE)
write.table(ta,"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\- Appoggio -\\MTS\\Mappa_MEDITS_ITA\\TA_ITA_1999_2021.csv",sep=";",row.names = FALSE)
write.table(ta2,"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\- Appoggio -\\MTS\\Mappa_MEDITS_ITA\\TA_ITA_1999_2021.csv",sep=";",row.names = FALSE)
rm(list=ls())
library(plyr)
library(tidyverse)
# library(MEDITS)
library(sf)
library(reshape2)
library(ape)
library(rstatix)
# VIF function from ZuurÂ´s paper
source('D:\\HMSC\\scripts/vif.R')
setwd("D:\\COISPA\\B-USEFUL\\_MEDITS_Corrected_data_")
text <- "ALL_GSAs"
# MERGE MEDITS FILES
#---------------------------------------------------------
# # MERGE TA FILES FROM ALL GSAs
ta.files <- list.files(pattern="TA.*?\\.csv") # list all csv files that start with "TA"
ta_list <- lapply(ta.files, function(x) {read.csv(x, sep = ";", dec='.', header = T)}) # read them all at once into a list
ta <- ldply(ta_list, data.frame) # merge into single dataframe
ta<-ta[ta$VALIDITY=='V',] # only keep valid hauls
ta <- ta[ta$AREA %in% c(9,10,11,16,17,18,19),]
ta2 <- BioIndex::MEDITS.to.dd(ta)
ta2[ta2$AREA %in% c(18), "COUNTRY"]
unique(ta2[ta2$AREA %in% c(18), "COUNTRY"])
ta2[ta2$AREA %in% c(18), "COUNTRY"] <- "ITA"
ta2 <- ta2[ta2$COUNTRY %in% c("ITA"), ]
plot(ta2$SHOOTING_LONGITUDE,ta2$SHOOTING_LATITUDE)
write.table(ta2,"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\- Appoggio -\\MTS\\Mappa_MEDITS_ITA\\TA_ITA_1999_2021.csv",sep=";",row.names = FALSE)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
filedir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
GSA <- 7
COUNTRY <- "FRA"
# GENUS <- "PSET"
# SPECIES <- "MAX"
# years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_GSA7.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA7.csv",sep=""), sep=";", header=T)
ta <- read.table(file=paste(filedir, "\\TA_GSA7.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA7_cor.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA7.csv",sep=""), sep=",", header=T)
te <- read.table(file=paste(filedir, "\\TE_GSA7.csv",sep=""), sep=",", header=T)
tl <- read.table(file=paste(filedir, "\\TL_GSA7.csv",sep=""), sep=",", header=T)
ta
ta <- read.table(file=paste(filedir, "\\TA_GSA7.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA7_cor.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA7.csv",sep=""), sep=";", header=T)
te <- read.table(file=paste(filedir, "\\TE_GSA7.csv",sep=""), sep=";", header=T)
tl <- read.table(file=paste(filedir, "\\TL_GSA7.csv",sep=""), sep=";", header=T)
ta
tb
tc
te
tl
# # load TX tables for a unique GSA per time
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_GSA7.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA7_cor.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA7.csv",sep=""), sep=";", header=T)
te <- read.table(file=paste(filedir, "\\TE_GSA7.csv",sep=""), sep=";", header=T)
tl <- read.table(file=paste(filedir, "\\TL_GSA7.csv",sep=""), sep=";", header=T)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$COUNTRY %in% COUNTRY, ]
tb <- tb[tb$AREA==GSA & tb$COUNTRY %in% COUNTRY, ]
tc <- tc[tc$AREA==GSA & tc$COUNTRY %in% COUNTRY, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$COUNTRY %in% COUNTRY, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$COUNTRY %in% COUNTRY, ]
}
tl
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
zip=TRUE
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
te
year <- 2024
DataTE <- te # RoME::TE # read.csv("~/GitHub/RoME/data/TE_2012-2018 _GSA18.csv", sep=";")
SPECIES <- NA
SEX <- NA
AREA <- NA
ab_parameters
oldpar <- par(no.readonly = TRUE)
on.exit(suppressWarnings(par(oldpar$mfraw)))
if (!file.exists(file.path(wd, "Logfiles"))) {
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd, "Graphs"))) {
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
numberError <- 0
if (!exists("suffix")) {
suffix <- paste(as.character(Sys.Date()), format(Sys.time(), "_time_h%Hm%Ms%OS0"), sep = "")
}
Errors <- file.path(wd, "Logfiles", paste("Logfile_", suffix, ".dat", sep = ""))
if (!file.exists(Errors)) {
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTE <- DataTE[DataTE$YEAR == year, ]
DataTE
TE <- DataTE[!is.na(DataTE$AREA),]
TE <- TE[!is.na(TE$LENGTH_CLASS), ]
write(paste("\n----------- check consistency individual weights in TE - ", TE$YEAR[1]), file = Errors, append = TRUE)
numberError <- 0
numberError_ <- 0
TE_ND <- TE[as.character(TE$INDIVIDUAL_WEIGHT) == "ND", ] # selection on the weight ND
TE_ND$Species <- paste(TE_ND$GENUS, TE_ND$SPECIES)
species <- unique(TE_ND$Species)
list_g1_g2 <- RoME::list_g1_g2
G1 <- data.frame(as.character(list_g1_g2[!is.na(list_g1_g2$MEDITS_G1), "CODE"]))
for (spe in species) {
if ((spe %in% G1[, 1])) {
write(paste("For G1 species the individual weight in TE is mandatory. Please check,", spe), file = Errors, append = TRUE)
numberError_ <- numberError_ + 1
}
}
TE <- TE[as.character(TE$INDIVIDUAL_WEIGHT) != "ND", ] # selection on the weight different from ND
if (class(LW) != "data.frame") {
if (all(is.na(LW))) {
if (verbose) {
message("a and b parameters extracted from RoME LW table")
}
LW <- RoME::LW
}
}
TE$mean_weight <- NA
TE$perc_diff <- NA
species_to_plot <- as.character(unique(LW[, "SPECIES"])) # LW$AREA == TE$AREA[1]
for (i in 1:nrow(TE)) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ] #
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "m") {
mean_length <- TE$LENGTH_CLASS[i] + 0.5
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "0") { # step: 0.5 cm
mean_length <- (TE$LENGTH_CLASS[i] + 2.5) / 10
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "1") { # step: 1 cm
mean_length <- (TE$LENGTH_CLASS[i] + 5) / 10
}
mean_weight <- A * mean_length^B
TE$mean_length[i] <- mean_length
TE$mean_weight[i] <- mean_weight # estimated weight
TE$perc_diff[i] <- (as.numeric(as.character(TE$INDIVIDUAL_WEIGHT[i])) - TE$mean_weight[i]) / as.numeric(as.character(TE$mean_weight[i])) * 100
if (abs(TE$perc_diff[i]) > 20) {
numberError <- numberError + 1
}
}
}
i
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ] #
ab
(nrow(ab)==0)
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
ab
(nrow(ab) != 0)
A <- ab$a[1]
B <- ab$b[1]
(as.character(TE$LENGTH_CLASSES_CODE[i]) == "m")
(as.character(TE$LENGTH_CLASSES_CODE[i]) == "0")
mean_length <- (TE$LENGTH_CLASS[i] + 2.5) / 10
mean_length
mean_weight <- A * mean_length^B
mean_weight
TE$mean_length[i] <- mean_length
TE$mean_length[i]
TE$mean_length
TE
TE$mean_length <- NA
TE$mean_weight <- NA
TE$perc_diff <- NA
species_to_plot <- as.character(unique(LW[, "SPECIES"])) # LW$AREA == TE$AREA[1]
i <- 1
for (i in 1:nrow(TE)) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ] #
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "m") {
mean_length <- TE$LENGTH_CLASS[i] + 0.5
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "0") { # step: 0.5 cm
mean_length <- (TE$LENGTH_CLASS[i] + 2.5) / 10
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "1") { # step: 1 cm
mean_length <- (TE$LENGTH_CLASS[i] + 5) / 10
}
mean_weight <- A * mean_length^B
TE$mean_length[i] <- mean_length
TE$mean_weight[i] <- mean_weight # estimated weight
TE$perc_diff[i] <- (as.numeric(as.character(TE$INDIVIDUAL_WEIGHT[i])) - TE$mean_weight[i]) / as.numeric(as.character(TE$mean_weight[i])) * 100
if (abs(TE$perc_diff[i]) > 20) {
numberError <- numberError + 1
}
}
}
TE
# scatter plots
# ii=26
for (ii in 1:length(species_to_plot)) {
TE_temp1 <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii], ]
if (nrow(TE_temp1) != 0) {
# tiff(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".tif", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 300, compression = "lzw", pointsize = 1 / 300)
jpeg(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".jpeg", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 200, quality=80)
par(mfrow = c(3, 1))
}
sex="M"
for (sex in c("M", "F", "I", "N")) {
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
if (nrow(TE_temp) != 0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ]
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
}
xx <- as.numeric(as.character(unique(TE_temp$mean_length[order(as.numeric(as.character(TE_temp$mean_length)))])))
yy <- A * xx^B
if (as.character(TE_temp$LENGTH_CLASSES_CODE[1]) == "m") {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (mm)", ylab = "weight (g)")
} else {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (cm)", ylab = "weight (g)")
}
lines(xx, yy, col = "blue")
}
} # fine sex
if (nrow(TE_temp1) != 0) {
dev.off()
}
} # fine ciclo for
if (numberError == 0) {
write(paste("No error occurred"), file = Errors, append = TRUE)
} else {
write.table(TE, file = file.path(wd, paste("TE_with_estimated_weights_", TE$YEAR[1], ".csv", sep = "")), sep = ";", row.names = F)
write("For some records the difference between estimated and observed individual weight is greater than 20%. Please verify in the file TE_with_estimated_weights.csv automatically produced in the working directory", file = Errors, append = TRUE)
}
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
filedir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
GSA <- 7
COUNTRY <- "FRA"
# GENUS <- "PSET"
# SPECIES <- "MAX"
# years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_GSA7.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA7_cor.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA7.csv",sep=""), sep=";", header=T)
te <- read.table(file=paste(filedir, "\\TE_GSA7.csv",sep=""), sep=";", header=T)
tl <- read.table(file=paste(filedir, "\\TL_GSA7.csv",sep=""), sep=";", header=T)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$COUNTRY %in% COUNTRY, ]
tb <- tb[tb$AREA==GSA & tb$COUNTRY %in% COUNTRY, ]
tc <- tc[tc$AREA==GSA & tc$COUNTRY %in% COUNTRY, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$COUNTRY %in% COUNTRY, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$COUNTRY %in% COUNTRY, ]
}
# te[1,"LENGTH_CLASS"] <- NA
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=TRUE
################ NON MODIFICARE #############
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
source("~/GitHub/RoME_appoggio/data/Gregoire/Test_RoMEBScc.R", echo=TRUE)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
filedir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
GSA <- 8
COUNTRY <- "FRA"
# # load TX tables for a unique GSA per time
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_GSA8.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA8_cor.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA8.csv",sep=""), sep=";", header=T)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
filedir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
GSA <- 8
COUNTRY <- "FRA"
# GENUS <- "PSET"
# SPECIES <- "MAX"
# years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\Gregoire"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_GSA8.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA8_cor.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA8.csv",sep=""), sep=";", header=T)
ta <- read.table(file=paste(filedir, "\\TA_GSA8.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA8_cor.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA8.csv",sep=""), sep=";", header=T)
te <- read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T)
tl <- read.table(file=paste(filedir, "\\TL_GSA8.csv",sep=""), sep=";", header=T)
ta
tb
tc
te
tl
source("~/GitHub/RoME_appoggio/data/Gregoire/Test_RoMEBScc.R", echo=TRUE)
library(remotes)
remotes::install_git("https://github.com/COISPA/RoME")
wd <- tempdir()
suffix=NA
DataTA = RoME::TA
DataTB = RoME::TB
DataTC = RoME::TC
DataTE = NA
DataTL = NA
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix,
Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL)
library(RoME)
install.packages("rnaturalearth")
library(RoME)
install.packages("rnaturalearth")
library(RoME)
wd <- "D:\\Documents and Settings\\Utente\\Desktop\\rrrr"
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = RoME::TA
DataTB = RoME::TB
DataTC = RoME::TC
DataTE = NA
DataTL = NA
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix,
Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL)
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix,
Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL, verbose=FALSE)
``` r
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
```
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix)
library(RoME)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoME(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix, verbose=FALSE)
``` r
library(remotes)
remotes::install_git("https://github.com/COISPA/RoME")
detach("package:RoME", unload = TRUE)
wd <- tempdir()
suffix=NA
DataTA = RoME::TA
DataTB = RoME::TB
DataTC = RoME::TC
DataTE = NA
DataTL = NA
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix,
Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL)
wd <- tempdir()
suffix=NA
DataTA = data.frame(RoME::TA[RoME::TA$YEAR==2012 ,])
DataTB = data.frame(RoME::TB[RoME::TB$YEAR==2012 ,])
DataTC = data.frame(RoME::TC[RoME::TC$YEAR==2012 ,])
DataTE = NA
DataTL = NA
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix,
Stratification=RoME::stratification_scheme,
Ref_list=RoME::TM_list,DataTargetSpecies=RoME::DataTargetSpecies,
Maturity=RoME::Maturity_parameters,ab_parameters=RoME::LW,
stages_list=RoME::mat_stages,assTL=RoME::assTL, verbose=FALSE)
RoMEcc(DataTA, DataTB,DataTC,DataTE,DataTL, wd, suffix, verbose=FALSE)
devtools::build_manual(pkg = ".", path = NULL)
