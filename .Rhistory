GSA <- 5
years <- c(2002,2002)
# # load TX tables for a unique GSA per time
wd <- "D:\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\QualiTrain\Task 2\Data\MEDITS" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #  "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
GSA <- 5
years <- c(2002,2002)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(filedir, "\\TB_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tc <- read.table(file=paste(filedir, "\\TC_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
tb
ta
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #  "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
GSA <- 29
years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(filedir, "\\TB_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tc <- read.table(file=paste(filedir, "\\TC_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
ta
tb
tb <- read.table(file=paste(filedir, "\\TB_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tb
tb <- read.table(file=paste(filedir, "\\TB_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tc
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #  "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
GSA <- 29
years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(filedir, "\\TB_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# te[1,"LENGTH_CLASS"] <- NA
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEBScc.R", echo=TRUE)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
GSA <- 29
COUNTRY <- "BGR"
GENUS <- "PSET"
SPECIES <- "MAX"
years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(wd, "\\TB_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(wd, "\\TC_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years & ta$COUNTRY %in% COUNTRY, ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years & tb$GENUS %in% GENUS & tb$SPECIES %in% SPECIES, ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years & tc$GENUS %in% GENUS & tc$SPECIES %in% SPECIES, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# te[1,"LENGTH_CLASS"] <- NA
ta
tb
tc
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# te[1,"LENGTH_CLASS"] <- NA
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
GSA <- 29
COUNTRY <- "BGR"
GENUS <- "PSET"
SPECIES <- "MAX"
years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\TA_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(wd, "\\TB_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(wd, "\\TC_BGR_BTSBS-AUT_HANDBOOK_test.csv",sep=""), sep=";", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years & ta$COUNTRY %in% COUNTRY, ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years & tb$GENUS %in% GENUS & tb$SPECIES %in% SPECIES, ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years & tc$GENUS %in% GENUS & tc$SPECIES %in% SPECIES, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# te[1,"LENGTH_CLASS"] <- NA
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
GSA <- 29
COUNTRY <- "BGR"
GENUS <- "PSET"
SPECIES <- "MAX"
years <- c(2015,2015)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(filedir, "\\TB_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_BGR_BTSBS-AUT_HANDBOOK.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years & ta$COUNTRY %in% COUNTRY, ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years & tb$GENUS %in% GENUS & tb$SPECIES %in% SPECIES, ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years & tc$GENUS %in% GENUS & tc$SPECIES %in% SPECIES, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# te[1,"LENGTH_CLASS"] <- NA
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
DataTA = ta # RoME::TA #read.csv("~/GitHub/RoME/data/TA_GSA18_1994-2018.csv", sep=";")
year=2015
lon <- lat <- NULL
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
numberError = 0
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'",arg,"' argument should be provided"))
} else if (length(year)!= 1) {
stop(paste0("only one value should be provided for '",arg,"' argument"))
} else if (is.na(year)){
stop(paste0(arg," argument should be a numeric value"))
}
DataTA <- DataTA[DataTA$YEAR == year, ]
DataTA
ResultData = DataTA[!is.na(DataTA$DISTANCE),]
write(paste("\n----------- check consistency of the hauls coordinates with the distance - ", ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData=MEDITS.to.dd(ResultData)
ResultData
ResultData[ResultData$HAUL_NUMBER ==32, ]
ResultData <- ResultData[ResultData$HAUL_NUMBER ==32, ]
i=1
ResultData$computed_distance[i]= dd.distance(ResultData[i,], unit = "m", verbose=FALSE)
ResultData$computed_distance[i]
dd.distance
?distance
terra::distance()
?terra::distance
ResultData[i,]
dd.distance
?dd.distance
vect(c(ResultData$SHOOTING_LONGITUDE, ResultData$SHOOTING_LATITUDE))
terra::vect(c(ResultData$SHOOTING_LONGITUDE, ResultData$SHOOTING_LATITUDE))
?terra::vect
p1 <- terra::vect(data.frame(x=ResultData$SHOOTING_LONGITUDE, y=ResultData$SHOOTING_LATITUDE))
data.frame(x=ResultData$SHOOTING_LONGITUDE, y=ResultData$SHOOTING_LATITUDE)
p1 <- data.frame(x=ResultData$SHOOTING_LONGITUDE, y=ResultData$SHOOTING_LATITUDE)
p1 <- terra::vect(p1, geom=c("x", "y"), crs="+proj=longlat", keepgeom=FALSE)
p1
p2 <- data.frame(x=ResultData$HAULING_LONGITUDE, y=ResultData$HAULING_LATITUDE)
p2 <- terra::vect(p1, geom=c("x", "y"), crs="+proj=longlat", keepgeom=FALSE)
terra::distance(p1,p2)
?terra::distance
pd <- terra::distance(p1, p2, pairwise=TRUE)
library(terra)
p1 <- data.frame(x=ResultData$SHOOTING_LONGITUDE, y=ResultData$SHOOTING_LATITUDE)
p1 <- terra::vect(p1, geom=c("x", "y"), crs="+proj=longlat", keepgeom=FALSE)
p2 <- data.frame(x=ResultData$HAULING_LONGITUDE, y=ResultData$HAULING_LATITUDE)
p2 <- terra::vect(p1, geom=c("x", "y"), crs="+proj=longlat", keepgeom=FALSE)
pd <- terra::distance(p1, p2, pairwise=TRUE)
p1 <- data.frame(x=ResultData$SHOOTING_LONGITUDE, y=ResultData$SHOOTING_LATITUDE)
p1 <- terra::vect(p1, geom=c("x", "y"), crs="+proj=longlat", keepgeom=FALSE)
p2 <- data.frame(x=ResultData$HAULING_LONGITUDE, y=ResultData$HAULING_LATITUDE)
p2 <- terra::vect(p1, geom=c("x", "y"), crs="+proj=longlat", keepgeom=FALSE)
p2 <- terra::vect(p2, geom=c("x", "y"), crs="+proj=longlat", keepgeom=FALSE)
pd <- terra::distance(p1, p2, pairwise=TRUE)
pd
library(RoME)
library(RoME)
?check_temperature
library(RoME)
library(RoME)
library(RoME)
check_temperature
library(RoME)
