FoundInTable=Weight[which(as.character(Weight$SPECIES)==as.character(ResultData$species[i])),]
FoundInTable=FoundInTable[is.na(FoundInTable$MIN_WEIGHT)==FALSE ,]
FoundInTable
present$present=FALSE
FoundInTable=Weight[which(as.character(Weight$SPECIES)==as.character(ResultData$species[i])),]
FoundInTable=FoundInTable[is.na(FoundInTable$MIN_WEIGHT)==FALSE ,]
FoundInTable
(nrow(FoundInTable)!=0)
((present[present$species==ResultData$species[i],]$present==FALSE) & (present[present$species==ResultData$species[i],]$occurrence>=10))
if((present[present$species==ResultData$species[i],]$present==FALSE) & (present[present$species==ResultData$species[i],]$occurrence>=10)){
nb_graphs_to_be_printed = nb_graphs_to_be_printed + 1
present[present$species==ResultData$species[i],]$present=TRUE
xlabels <- ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER
X= 1:length(ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER)
Y=ResultData[ResultData$species==ResultData$species[i]& !is.infinite(ResultData$mean_weight),]$mean_weight
pp <- 0
if (length(X)>=10) {
if ( nb_graphs<20) {
dev.new(width=60, height=60)
print(i)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
nb_graphs= nb_graphs+1
}
}
}
dev.cur()
dev.off(dev.cur())
dev.cur()
dev.off()
dev.cur()
dev.off()
if (length(X)>=10) {
if ( nb_graphs<20) {
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
dev.off()
text(X,Y,labels=xlabels)
nb_graphs= nb_graphs+1
}
}
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
dev.off()
text(X,Y,labels=xlabels)
text(X,Y,labels=xlabels)
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
dev.off()
dev.cur()
dev.off()
dev.off()
dev.cur()
for (i in 1:nrow(ResultData)){
FoundInTable=Weight[which(as.character(Weight$SPECIES)==as.character(ResultData$species[i])),]
FoundInTable=FoundInTable[is.na(FoundInTable$MIN_WEIGHT)==FALSE ,]
if (nrow(FoundInTable)!=0){
if (((ResultData$mean_weight[i]<FoundInTable$MIN_WEIGHT[1]) | (ResultData$mean_weight[i]>FoundInTable$MAX_WEIGHT[1]))==TRUE)
{
write(paste("Warning: Haul ",ResultData$HAUL_NUMBER[i]," ",ResultData$species[i]," : mean weight= ", ResultData$mean_weight[i]," out of boundaries (",FoundInTable$MIN_WEIGHT[1],",",FoundInTable$MAX_WEIGHT[1],") in ", ResultData$TYPE_OF_FILE[1],sep=""), file = Errors, append = TRUE)
}
} else {
if((present[present$species==ResultData$species[i],]$present==FALSE) & (present[present$species==ResultData$species[i],]$occurrence>=10)){
nb_graphs_to_be_printed = nb_graphs_to_be_printed + 1
present[present$species==ResultData$species[i],]$present=TRUE
xlabels <- ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER
X= 1:length(ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER)
Y=ResultData[ResultData$species==ResultData$species[i]& !is.infinite(ResultData$mean_weight),]$mean_weight
pp <- 0
if (length(X)>=10) {
if ( nb_graphs<20) {
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
dev.off()
nb_graphs= nb_graphs+1
}
}
}
}
}
dev.cur()
source("~/GitHub/RoME/R/check_weight.r")
check_weight(ResultDataTB, year, RoME::DataTargetSpecies, wd, suffix)
if (nb_graphs_to_be_printed >20){
write(paste("Too many graphs to be displayed: all the graphs have been saved (up to a max of 120) in .tif file stored in Graphs directory",sep=""), file = Errors, append = TRUE)
print(paste("Too many graphs to be displayed: all the graphs have been saved (up to a max of 120) in .tif file stored in Graphs directory",sep=""),quote=FALSE)
}
nb_graphs
present_true = present[present$present == TRUE, ]
x=nb_graphs_to_be_printed
m=6
t1<-floor(x/m)
present_true
nb_graphs
#   odbcClose(channelData)
nb_graphs=0
nb_graphs_to_be_printed=0
i=108
for (i in 1:nrow(ResultData)){
FoundInTable=Weight[which(as.character(Weight$SPECIES)==as.character(ResultData$species[i])),]
FoundInTable=FoundInTable[is.na(FoundInTable$MIN_WEIGHT)==FALSE ,]
if (nrow(FoundInTable)!=0){
if (((ResultData$mean_weight[i]<FoundInTable$MIN_WEIGHT[1]) | (ResultData$mean_weight[i]>FoundInTable$MAX_WEIGHT[1]))==TRUE)
{
write(paste("Warning: Haul ",ResultData$HAUL_NUMBER[i]," ",ResultData$species[i]," : mean weight= ", ResultData$mean_weight[i]," out of boundaries (",FoundInTable$MIN_WEIGHT[1],",",FoundInTable$MAX_WEIGHT[1],") in ", ResultData$TYPE_OF_FILE[1],sep=""), file = Errors, append = TRUE)
}
} else {
if((present[present$species==ResultData$species[i],]$present==FALSE) & (present[present$species==ResultData$species[i],]$occurrence>=10)){
nb_graphs_to_be_printed = nb_graphs_to_be_printed + 1
present[present$species==ResultData$species[i],]$present=TRUE
xlabels <- ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER
X= 1:length(ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER)
Y=ResultData[ResultData$species==ResultData$species[i]& !is.infinite(ResultData$mean_weight),]$mean_weight
pp <- 0
if (length(X)>=10) {
if ( nb_graphs<20) {
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
dev.off()
nb_graphs= nb_graphs+1
}
}
}
}
}
nb_graphs_to_be_printed
if (nb_graphs_to_be_printed >20){
write(paste("Too many graphs to be displayed: all the graphs have been saved (up to a max of 120) in .tif file stored in Graphs directory",sep=""), file = Errors, append = TRUE)
print(paste("Too many graphs to be displayed: all the graphs have been saved (up to a max of 120) in .tif file stored in Graphs directory",sep=""),quote=FALSE)
}
nb_graphs
(nb_graphs_to_be_printed >20)
nb_graphs
ResultDataTB = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\medits_tb_1.csv",sep=";",header=TRUE)# tb # RoME::TB
# ResultDataTB$TOTAL_NUMBER_IN_THE_HAUL[27]=0
year=2012
DataTargetSpecies <- RoME::DataTargetSpecies
suffix=NA
oldpar <- par()
on.exit(suppressWarnings(par(oldpar)))
if (!file.exists(file.path(wd,"Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
if (!file.exists(file.path(wd,"Graphs"))){
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultDataTB <- ResultDataTB[ResultDataTB$YEAR == year, ]
numberError = 0
Result = ResultDataTB
write(paste("\n----------- check consistency of weight and number TB - ",Result$YEAR[1]), file = Errors, append = TRUE)
Weight=DataTargetSpecies #read.csv(file=paste(DataTargetSpecies,".csv",sep=""),sep=";",header=TRUE)
#queryData= paste("SELECT TYPE_OF_FILE, HAUL_NUMBER, GENUS, SPECIES,TOTAL_WEIGHT_IN_THE_HAUL,TOTAL_NUMBER_IN_THE_HAUL from Result where HAUL_NUMBER is not null order by HAUL_NUMBER", sep="")
ResultData = Result[order(Result$HAUL_NUMBER),c("TYPE_OF_FILE", "HAUL_NUMBER", "GENUS", "SPECIES","TOTAL_WEIGHT_IN_THE_HAUL","TOTAL_NUMBER_IN_THE_HAUL")] #sqldf(queryData)
ResultData$species=paste(ResultData$GENUS,ResultData$SPECIES,sep="")
ResultData =  ResultData[ResultData$TOTAL_NUMBER_IN_THE_HAUL!=0 & !is.na(ResultData$TOTAL_NUMBER_IN_THE_HAUL),]
ResultData$mean_weight=round(ResultData$TOTAL_WEIGHT_IN_THE_HAUL/ResultData$TOTAL_NUMBER_IN_THE_HAUL,3)
dev.off()
dev.off()
numberError = 0
Result = ResultDataTB
write(paste("\n----------- check consistency of weight and number TB - ",Result$YEAR[1]), file = Errors, append = TRUE)
Weight=DataTargetSpecies #read.csv(file=paste(DataTargetSpecies,".csv",sep=""),sep=";",header=TRUE)
#queryData= paste("SELECT TYPE_OF_FILE, HAUL_NUMBER, GENUS, SPECIES,TOTAL_WEIGHT_IN_THE_HAUL,TOTAL_NUMBER_IN_THE_HAUL from Result where HAUL_NUMBER is not null order by HAUL_NUMBER", sep="")
ResultData = Result[order(Result$HAUL_NUMBER),c("TYPE_OF_FILE", "HAUL_NUMBER", "GENUS", "SPECIES","TOTAL_WEIGHT_IN_THE_HAUL","TOTAL_NUMBER_IN_THE_HAUL")] #sqldf(queryData)
ResultData$species=paste(ResultData$GENUS,ResultData$SPECIES,sep="")
ResultData =  ResultData[ResultData$TOTAL_NUMBER_IN_THE_HAUL!=0 & !is.na(ResultData$TOTAL_NUMBER_IN_THE_HAUL),]
ResultData$mean_weight=round(ResultData$TOTAL_WEIGHT_IN_THE_HAUL/ResultData$TOTAL_NUMBER_IN_THE_HAUL,3)
for (i in 1:nrow(ResultData)){
FoundInTable=Weight[which(as.character(Weight$SPECIES)==as.character(ResultData$species[i])),]
FoundInTable=FoundInTable[is.na(FoundInTable$MIN_WEIGHT)==FALSE ,]
if (nrow(FoundInTable)!=0){
if (((ResultData$mean_weight[i]<FoundInTable$MIN_WEIGHT[1]) | (ResultData$mean_weight[i]>FoundInTable$MAX_WEIGHT[1]))==TRUE)
{
write(paste("Warning: Haul ",ResultData$HAUL_NUMBER[i]," ",ResultData$species[i]," : mean weight= ", ResultData$mean_weight[i]," out of boundaries (",FoundInTable$MIN_WEIGHT[1],",",FoundInTable$MAX_WEIGHT[1],") in ", ResultData$TYPE_OF_FILE[1],sep=""), file = Errors, append = TRUE)
}
} else {
if((present[present$species==ResultData$species[i],]$present==FALSE) & (present[present$species==ResultData$species[i],]$occurrence>=10)){
nb_graphs_to_be_printed = nb_graphs_to_be_printed + 1
present[present$species==ResultData$species[i],]$present=TRUE
xlabels <- ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER
X= 1:length(ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER)
Y=ResultData[ResultData$species==ResultData$species[i]& !is.infinite(ResultData$mean_weight),]$mean_weight
pp <- 0
if (length(X)>=10) {
if ( nb_graphs<20) {
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
dev.off()
nb_graphs= nb_graphs+1
}
}
}
}
}
(nb_graphs_to_be_printed >20)
#   odbcClose(channelData)
nb_graphs=0
nb_graphs_to_be_printed=0
i=108
for (i in 1:nrow(ResultData)){
FoundInTable=Weight[which(as.character(Weight$SPECIES)==as.character(ResultData$species[i])),]
FoundInTable=FoundInTable[is.na(FoundInTable$MIN_WEIGHT)==FALSE ,]
if (nrow(FoundInTable)!=0){
if (((ResultData$mean_weight[i]<FoundInTable$MIN_WEIGHT[1]) | (ResultData$mean_weight[i]>FoundInTable$MAX_WEIGHT[1]))==TRUE)
{
write(paste("Warning: Haul ",ResultData$HAUL_NUMBER[i]," ",ResultData$species[i]," : mean weight= ", ResultData$mean_weight[i]," out of boundaries (",FoundInTable$MIN_WEIGHT[1],",",FoundInTable$MAX_WEIGHT[1],") in ", ResultData$TYPE_OF_FILE[1],sep=""), file = Errors, append = TRUE)
}
} else {
if((present[present$species==ResultData$species[i],]$present==FALSE) & (present[present$species==ResultData$species[i],]$occurrence>=10)){
nb_graphs_to_be_printed = nb_graphs_to_be_printed + 1
present[present$species==ResultData$species[i],]$present=TRUE
xlabels <- ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER
X= 1:length(ResultData[ResultData$species==ResultData$species[i] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER)
Y=ResultData[ResultData$species==ResultData$species[i]& !is.infinite(ResultData$mean_weight),]$mean_weight
pp <- 0
if (length(X)>=10) {
if ( nb_graphs<20) {
dev.new(width=60, height=60)
plot(X,Y,main=paste(ResultData$species[i],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
dev.off()
nb_graphs= nb_graphs+1
print(paste(nb_graphs,i))
}
}
}
}
}
(nb_graphs_to_be_printed >20)
if (nb_graphs_to_be_printed >20){
write(paste("Too many graphs to be displayed: all the graphs have been saved (up to a max of 120) in .tif file stored in Graphs directory",sep=""), file = Errors, append = TRUE)
print(paste("Too many graphs to be displayed: all the graphs have been saved (up to a max of 120) in .tif file stored in Graphs directory",sep=""),quote=FALSE)
}
if (nb_graphs!=0){
present_true = present[present$present == TRUE, ]
x=nb_graphs_to_be_printed
m=6
t1<-floor(x/m)
if ((x-t1*m) ==0){
nb_sheets= as.integer(nb_graphs_to_be_printed/6)
}  else {
nb_sheets= as.integer(nb_graphs_to_be_printed/6)+1
}
# number of plots in the current .tif
i=1
for (i in 1:nb_sheets) {
if ((6*i)>nrow(present_true) ){
nb_loops = nrow(present_true)
}  else {
nb_loops = 6*i
}
if (i<=20){
# tiff(filename=file.path(wd,"Graphs",paste("check_mean_weight_",Result$AREA[1],"_",Result$YEAR[1],"_", i,".tif",sep="")),width=12, height=8, bg="white", units="in", res=300, compression = 'lzw', pointsize = 1/300)
jpeg(filename=file.path(wd,"Graphs",paste("check_mean_weight_",Result$AREA[1],"_",Result$YEAR[1],"_", i,".jpeg",sep="")),width=12, height=8, bg="white", units="in", res=300,quality=80)
par(mfrow=c(3,2), mai=c(0.6,0.6,0.6,0.6), omi=c(0.8,0.8,1,0.8))
for (m in (6*i-5):(nb_loops)) {
xlabels <- ResultData[ResultData$species==ResultData$species[m] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER
X= 1:length(ResultData[ResultData$species==ResultData$species[m] & !is.infinite(ResultData$mean_weight),]$HAUL_NUMBER)
Y=ResultData[ResultData$species==ResultData$species[m]& !is.infinite(ResultData$mean_weight),]$mean_weight
if (length(X)!=0){
plot(X,Y,main=paste(ResultData$species[m],"-",Result$YEAR[1]),xlab="HAUL number",ylab="mean weight",type="b",pch=".")
text(X,Y,labels=xlabels)
}
}
}
dev.off()
}
}
source("~/GitHub/RoME/R/check_weight.r")
check_weight(ResultDataTB, year, RoME::DataTargetSpecies, wd, suffix)
dev.off()
dev.off()
if(!interactive())
pdf(NULL)
dev.cur()
dev.cur()==1
dev.cur()>1
until( dev.cur()>1){
if (dev.cur()>1){
until( dev.cur()>1 ){
dev.cur()
?until
while( dev.cur()>1 ){
dev.off()
}
if (dev.cur()>1){
while( dev.cur()>1 ){
dev.off()
}
}
source("~/GitHub/RoME/R/check_weight.r")
check_weight(ResultDataTB, year, RoME::DataTargetSpecies, wd, suffix)
cur.dev()
dev.cur()
dev.off()
(dev.cur()>1)
if (dev.cur()>1){
while( dev.cur()>1 ){
dev.off()
dev.cur()
}
}
print(dev.cur())
source("~/GitHub/RoME/R/check_weight.r")
check_weight(ResultDataTB, year, RoME::DataTargetSpecies, wd, suffix)
dev.cur()
library(RoME)
tempdir()
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\test"
ResultDataTB = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\medits_tb_1.csv",sep=";",header=TRUE)# tb # RoME::TB
# ResultDataTB$TOTAL_NUMBER_IN_THE_HAUL[27]=0
year=2012
DataTargetSpecies <- RoME::DataTargetSpecies
suffix=NA
check_weight(ResultDataTB, year, RoME::DataTargetSpecies, wd, suffix)
dev.off()
list.files(tempdir())
ll <- list.files(tempdir())
ll <- list.files(tempdir())
#    if (file.exists(file.path(tempdir(), "Logfiles"))){
unlink(file.path(tempdir(),ll),recursive=T)
source("~/GitHub/RoME/R/check_weight.r")
source("~/GitHub/RoME/R/check_weight.r")
dev.off()
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\test"
ResultDataTB = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\medits_tb_1.csv",sep=";",header=TRUE)# tb # RoME::TB
# ResultDataTB$TOTAL_NUMBER_IN_THE_HAUL[27]=0
year=2012
DataTargetSpecies <- RoME::DataTargetSpecies
suffix=NA
check_weight(ResultDataTB, year, RoME::DataTargetSpecies, wd, suffix)
ll <- list.files(tempdir())
ll
ll <- list.files(tempdir())
unlink(file.path(tempdir(),ll),recursive=T)
if (dev.cur()>1){
while( dev.cur()>1 ){
dev.off()
print(dev.cur())
}
}
ll <- list.files(tempdir())
unlink(file.path(tempdir(),ll),recursive=T)
library(RoME)
library(RoME)
tempdir()
ll
lll <- list.files(tempdir())
lll
unlink(file.path(tempdir(),lll),recursive=T)
library(RoME)
dev.cur()
library(RoME)
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data" #  "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
GSA <- 18
years <- c(2017,2018)
# # load TX tables for a unique GSA per time
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_GSA18_1994-2018.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA18_1994-2018.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA18_1994-2018.csv",sep=""), sep=";", header=T)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# colnames(ta) <- colnames(RoME::TA)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
ta$BOTTOM_SALINITY_BEGINNING <- 15
ta$BOTTOM_SALINITY_END <- 15
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
dev.cur()
tempdir()
tempdir()
lll <- list.files(tempdir())
unlink(file.path(tempdir(),lll),recursive=T)
dev.dur()
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data" #  "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
GSA <- 18
years <- c(2017,2018)
# # load TX tables for a unique GSA per time
wd <- "D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data" #"D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\RDB2\\DataGSA1"
suffix=NA  # non modificare
ta <- read.table(file=paste(filedir, "\\TA_GSA18_1994-2018.csv",sep=""), sep=";", header=T)
tb <- read.table(file=paste(filedir, "\\TB_GSA18_1994-2018.csv",sep=""), sep=";", header=T)
tc <- read.table(file=paste(filedir, "\\TC_GSA18_1994-2018.csv",sep=""), sep=";", header=T)
te <- NA # read.table(file=paste(filedir, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(filedir,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# colnames(ta) <- colnames(RoME::TA)
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
ta$BOTTOM_SALINITY_BEGINNING <- 15
ta$BOTTOM_SALINITY_END <- 15
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
