TE$GENUS
ab
TE_temp1 <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii], ]
if (nrow(TE_temp1) != 0) {
# tiff(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".tif", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 300, compression = "lzw", pointsize = 1 / 300)
jpeg(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".jpeg", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 200, quality=80)
par(mfrow = c(3, 1))
}
sex="F"
sex="M"
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
TE_temp
ab <- LW[(LW$SPECIES == paste(TE_temp$GENUS[1], TE_temp$SPECIES[1])) & (as.character(LW$SEX) == as.character(TE_temp$SEX[1])), ] # & (LW$AREA==TE$AREA[1])
ab
ab
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ] #
ab
for (i in 1:nrow(TE)) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ] #
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) , ] # & (LW$AREA==TE$AREA[1])
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "m") {
mean_length <- TE$LENGTH_CLASS[i] + 0.5
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "0") { # step: 0.5 cm
mean_length <- (TE$LENGTH_CLASS[i] + 2.5) / 10
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "1") { # step: 1 cm
mean_length <- (TE$LENGTH_CLASS[i] + 5) / 10
}
mean_weight <- A * mean_length^B
TE$mean_length[i] <- mean_length
TE$mean_weight[i] <- mean_weight # estimated weight
TE$perc_diff[i] <- (as.numeric(as.character(TE$INDIVIDUAL_WEIGHT[i])) - TE$mean_weight[i]) / as.numeric(as.character(TE$mean_weight[i])) * 100
if (abs(TE$perc_diff[i]) > 20) {
numberError <- numberError + 1
}
}
}
# scatter plots
# ii=26
for (ii in 1:length(species_to_plot)) {
TE_temp1 <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii], ]
if (nrow(TE_temp1) != 0) {
# tiff(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".tif", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 300, compression = "lzw", pointsize = 1 / 300)
jpeg(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".jpeg", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 200, quality=80)
par(mfrow = c(3, 1))
}
sex="M"
for (sex in c("M", "F", "I","N")) {
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
if (nrow(TE_temp) != 0) {
ab <- LW[(LW$SPECIES == paste(TE_temp$GENUS[1], TE_temp$SPECIES[1])) & (as.character(LW$SEX) == as.character(TE_temp$SEX[1])), ] # & (LW$AREA==TE$AREA[1])
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
}
xx <- as.numeric(as.character(unique(TE_temp$mean_length[order(as.numeric(as.character(TE_temp$mean_length)))])))
yy <- A * xx^B
if (as.character(TE_temp$LENGTH_CLASSES_CODE[1]) == "m") {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (mm)", ylab = "weight (g)")
} else {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (cm)", ylab = "weight (g)")
}
lines(xx, yy, col = "blue")
}
} # fine sex
if (nrow(TE_temp1) != 0) {
dev.off()
}
} # fine ciclo for
numberError
sex="M"
sex="M"
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
TE_temp
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
TE_temp
TE_temp1 <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii], ]
ii
species_to_plot
ii=2
TE_temp1 <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii], ]
TE_temp1
if (nrow(TE_temp1) != 0) {
# tiff(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".tif", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 300, compression = "lzw", pointsize = 1 / 300)
jpeg(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".jpeg", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 200, quality=80)
par(mfrow = c(3, 1))
}
sex="M"
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
TE_temp
if (nrow(TE_temp) != 0) {
ab <- LW[(LW$SPECIES == paste(TE_temp$GENUS[1], TE_temp$SPECIES[1])) & (as.character(LW$SEX) == as.character(TE_temp$SEX[1])), ] # & (LW$AREA==TE$AREA[1])
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
}
xx <- as.numeric(as.character(unique(TE_temp$mean_length[order(as.numeric(as.character(TE_temp$mean_length)))])))
yy <- A * xx^B
if (as.character(TE_temp$LENGTH_CLASSES_CODE[1]) == "m") {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (mm)", ylab = "weight (g)")
} else {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (cm)", ylab = "weight (g)")
}
lines(xx, yy, col = "blue")
}
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (cm)", ylab = "weight (g)")
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (cm)", ylab = "weight (g)")
source("~/GitHub/RoME/R/check_individual_weightTE.r", echo=TRUE)
check_individual_weightTE(DataTE = te, LW = ab_parameters, year, wd = wd, suffix = suffix, verbose = TRUE)
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])), ]
ab
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]) , ]
ab
source("~/GitHub/RoME/R/check_individual_weightTE.r", echo=TRUE)
library(RoME)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/data/MEDITS_GSA7/Medits_Issue5.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/RDB/RoME_RDBFIS/data/MEDITS_GSA7/Medits_Issue5.R", echo=TRUE)
ab_parameters
ab_parameters[ab_parameters$SPECIES=="SARD PIL",]
library(RoME)
devtools::build_manual(pkg = ".", path = NULL)
#install.packages("devtools")
library(devtools)
#install_github("COISPA/RoME")
library("RoME")
wd <-"D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\RoME_FR\\RoME\\Medits_Issue5"
TA <- read.csv(file = file.path(wd, "TA_GSA7.csv"), header = TRUE, sep = ";")
TA$OBSERVATIONS <- as.integer(TA$OBSERVATIONS)
TB <- read.csv(file = file.path(wd, "TB_GSA7.csv"), header = TRUE, sep = ";")
TC <- read.csv(file = file.path(wd, "TC_GSA7.csv"), header = TRUE, sep = ";")
TE <- read.csv(file = file.path(wd, "TE_GSA7.csv"), header = TRUE, sep = ";")
TE$MATURITY <- ifelse(is.na(TE$MATURITY) | TE$MATURITY=="ND", 0, TE$MATURITY)
TE$MATURITY <- as.integer(TE$MATURITY)
TL <- read.csv(file = file.path(wd, "TL_GSA7.csv"), header = TRUE, sep = ";")
wd
suffix <- NA # paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
TA$YEAR
year <- 2021
DataTE <- TE # RoME::TE # read.csv("~/GitHub/RoME/data/TE_2012-2018 _GSA18.csv", sep=";")
DataTE
SPECIES <- NA
SEX <- NA
AREA <- NA
a <- NA
b <- NA
verbose <- FALSE
check_individual_weightTE(DataTE = TE, LW = ab_parameters, year, wd = wd, suffix = suffix, verbose = TRUE)
colnames(TE)
TE <- read.csv(file = file.path(wd, "TE_GSA7.csv"), header = TRUE, sep = ";")
TE$MATURITY <- ifelse(is.na(TE$MATURITY) | TE$MATURITY=="ND", 0, TE$MATURITY)
TE$MATURITY <- as.integer(TE$MATURITY)
colnames(TE)
colnames(RoME::TE)
DataTE <- TE # RoME::TE # read.csv("~/GitHub/RoME/data/TE_2012-2018 _GSA18.csv", sep=";")
check_individual_weightTE <- function(DataTE, LW = NA, year, wd, suffix, verbose = FALSE) {
oldpar <- par(no.readonly = TRUE)
on.exit(suppressWarnings(par(oldpar$mfraw)))
if (!file.exists(file.path(wd, "Logfiles"))) {
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd, "Graphs"))) {
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
numberError <- 0
if (!exists("suffix")) {
suffix <- paste(as.character(Sys.Date()), format(Sys.time(), "_time_h%Hm%Ms%OS0"), sep = "")
}
Errors <- file.path(wd, "Logfiles", paste("Logfile_", suffix, ".dat", sep = ""))
if (!file.exists(Errors)) {
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTE <- DataTE[DataTE$YEAR == year, ]
########################################
TE <- DataTE[!is.na(DataTE$AREA),]
write(paste("\n----------- check consistency individual weights in TE - ", TE$YEAR[1]), file = Errors, append = TRUE)
numberError <- 0
numberError_ <- 0
TE_ND <- TE[as.character(TE$INDIVIDUAL_WEIGHT) == "ND", ] # selection on the weight ND
TE_ND$Species <- paste(TE_ND$GENUS, TE_ND$SPECIES)
species <- unique(TE_ND$Species)
list_g1_g2 <- RoME::list_g1_g2
G1 <- data.frame(as.character(list_g1_g2[!is.na(list_g1_g2$MEDITS_G1), "CODE"]))
for (spe in species) {
if ((spe %in% G1[, 1])) {
write(paste("For G1 species the individual weight in TE is mandatory. Please check,", spe), file = Errors, append = TRUE)
numberError_ <- numberError_ + 1
}
}
TE <- TE[as.character(TE$INDIVIDUAL_WEIGHT) != "ND", ] # selection on the weight different from ND
if (class(LW) != "data.frame") {
if (all(is.na(LW))) {
if (verbose) {
message("a and b parameters extracted from RoME LW table")
}
LW <- RoME::LW
}
}
TE$mean_weight <- NA
TE$perc_diff <- NA
species_to_plot <- as.character(unique(LW[, "SPECIES"])) # LW$AREA == TE$AREA[1]
i <- 1
for (i in 1:nrow(TE)) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ] #
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "m") {
mean_length <- TE$LENGTH_CLASS[i] + 0.5
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "0") { # step: 0.5 cm
mean_length <- (TE$LENGTH_CLASS[i] + 2.5) / 10
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "1") { # step: 1 cm
mean_length <- (TE$LENGTH_CLASS[i] + 5) / 10
}
mean_weight <- A * mean_length^B
TE$mean_length[i] <- mean_length
TE$mean_weight[i] <- mean_weight # estimated weight
TE$perc_diff[i] <- (as.numeric(as.character(TE$INDIVIDUAL_WEIGHT[i])) - TE$mean_weight[i]) / as.numeric(as.character(TE$mean_weight[i])) * 100
if (abs(TE$perc_diff[i]) > 20) {
numberError <- numberError + 1
}
}
}
# scatter plots
# ii=26
for (ii in 1:length(species_to_plot)) {
TE_temp1 <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii], ]
if (nrow(TE_temp1) != 0) {
# tiff(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".tif", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 300, compression = "lzw", pointsize = 1 / 300)
jpeg(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".jpeg", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 200, quality=80)
par(mfrow = c(3, 1))
}
sex="M"
for (sex in c("M", "F", "I", "N")) {
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
if (nrow(TE_temp) != 0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ]
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
}
xx <- as.numeric(as.character(unique(TE_temp$mean_length[order(as.numeric(as.character(TE_temp$mean_length)))])))
yy <- A * xx^B
if (as.character(TE_temp$LENGTH_CLASSES_CODE[1]) == "m") {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (mm)", ylab = "weight (g)")
} else {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (cm)", ylab = "weight (g)")
}
lines(xx, yy, col = "blue")
}
} # fine sex
if (nrow(TE_temp1) != 0) {
dev.off()
}
} # fine ciclo for
if (numberError == 0) {
write(paste("No error occurred"), file = Errors, append = TRUE)
} else {
write.table(TE, file = file.path(wd, paste("TE_with_estimated_weights_", TE$YEAR[1], ".csv", sep = "")), sep = ";", row.names = F)
write("For some records the difference between estimated and observed individual weight is greater than 20%. Please verify in the file TE_with_estimated_weights.csv automatically produced in the working directory", file = Errors, append = TRUE)
}
if (file.exists(file.path(tempdir(), "Logfiles"))) {
unlink(file.path(tempdir(), "Logfiles"), recursive = T)
}
if (file.exists(file.path(tempdir(), "Graphs"))) {
unlink(file.path(tempdir(), "Graphs"), recursive = T)
}
if (file.exists(file.path(tempdir(), "files R-Sufi"))) {
unlink(file.path(tempdir(), "files R-Sufi"), recursive = T)
}
unlink(file.path(tempdir(), list.files(file.path(tempdir()))), recursive = T)
if (numberError_ == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
oldpar <- par(no.readonly = TRUE)
on.exit(suppressWarnings(par(oldpar$mfraw)))
if (!file.exists(file.path(wd, "Logfiles"))) {
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!file.exists(file.path(wd, "Graphs"))) {
dir.create(file.path(wd, "Graphs"), showWarnings = FALSE)
}
numberError <- 0
if (!exists("suffix")) {
suffix <- paste(as.character(Sys.Date()), format(Sys.time(), "_time_h%Hm%Ms%OS0"), sep = "")
}
Errors <- file.path(wd, "Logfiles", paste("Logfile_", suffix, ".dat", sep = ""))
if (!file.exists(Errors)) {
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
DataTE <- DataTE[DataTE$YEAR == year, ]
DataTE
TE <- DataTE[!is.na(DataTE$AREA),]
write(paste("\n----------- check consistency individual weights in TE - ", TE$YEAR[1]), file = Errors, append = TRUE)
numberError <- 0
numberError_ <- 0
TE_ND <- TE[as.character(TE$INDIVIDUAL_WEIGHT) == "ND", ] # selection on the weight ND
TE_ND$Species <- paste(TE_ND$GENUS, TE_ND$SPECIES)
species <- unique(TE_ND$Species)
list_g1_g2 <- RoME::list_g1_g2
G1 <- data.frame(as.character(list_g1_g2[!is.na(list_g1_g2$MEDITS_G1), "CODE"]))
for (spe in species) {
if ((spe %in% G1[, 1])) {
write(paste("For G1 species the individual weight in TE is mandatory. Please check,", spe), file = Errors, append = TRUE)
numberError_ <- numberError_ + 1
}
}
TE <- TE[as.character(TE$INDIVIDUAL_WEIGHT) != "ND", ] # selection on the weight different from ND
if (class(LW) != "data.frame") {
if (all(is.na(LW))) {
if (verbose) {
message("a and b parameters extracted from RoME LW table")
}
LW <- RoME::LW
}
}
TE$mean_weight <- NA
TE$perc_diff <- NA
species_to_plot <- as.character(unique(LW[, "SPECIES"])) # LW$AREA == TE$AREA[1]
i <- 1
for (i in 1:nrow(TE)) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ] #
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "m") {
mean_length <- TE$LENGTH_CLASS[i] + 0.5
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "0") { # step: 0.5 cm
mean_length <- (TE$LENGTH_CLASS[i] + 2.5) / 10
} else if (as.character(TE$LENGTH_CLASSES_CODE[i]) == "1") { # step: 1 cm
mean_length <- (TE$LENGTH_CLASS[i] + 5) / 10
}
mean_weight <- A * mean_length^B
TE$mean_length[i] <- mean_length
TE$mean_weight[i] <- mean_weight # estimated weight
TE$perc_diff[i] <- (as.numeric(as.character(TE$INDIVIDUAL_WEIGHT[i])) - TE$mean_weight[i]) / as.numeric(as.character(TE$mean_weight[i])) * 100
if (abs(TE$perc_diff[i]) > 20) {
numberError <- numberError + 1
}
}
}
# scatter plots
# ii=26
for (ii in 1:length(species_to_plot)) {
TE_temp1 <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii], ]
if (nrow(TE_temp1) != 0) {
# tiff(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".tif", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 300, compression = "lzw", pointsize = 1 / 300)
jpeg(filename = file.path(wd, "Graphs", paste("check_individual_weight_", species_to_plot[ii], "_", TE$YEAR[1], ".jpeg", sep = "")), width = 8, height = 8, bg = "white", units = "in", res = 200, quality=80)
par(mfrow = c(3, 1))
}
sex="M"
for (sex in c("M", "F", "I", "N")) {
TE_temp <- TE[paste(TE$GENUS, TE$SPECIES) == species_to_plot[ii] & as.character(TE$SEX) == sex, ]
if (nrow(TE_temp) != 0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i])) & (LW$AREA==TE$AREA[1]), ]
if (nrow(ab)==0) {
ab <- LW[(LW$SPECIES == paste(TE$GENUS[i], TE$SPECIES[i])) & (as.character(LW$SEX) == as.character(TE$SEX[i]))  , ] #
}
if (nrow(ab) != 0) {
A <- ab$a[1]
B <- ab$b[1]
}
xx <- as.numeric(as.character(unique(TE_temp$mean_length[order(as.numeric(as.character(TE_temp$mean_length)))])))
yy <- A * xx^B
if (as.character(TE_temp$LENGTH_CLASSES_CODE[1]) == "m") {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (mm)", ylab = "weight (g)")
} else {
plot(as.numeric(as.character(TE_temp$mean_length)), as.numeric(as.character(TE_temp$INDIVIDUAL_WEIGHT)), main = paste("Length-weight relationship ", paste(TE_temp$GENUS[1], TE_temp$SPECIES[1]), " ", sex, " - ", TE_temp$YEAR[1]), xlab = "length (cm)", ylab = "weight (g)")
}
lines(xx, yy, col = "blue")
}
} # fine sex
if (nrow(TE_temp1) != 0) {
dev.off()
}
} # fine ciclo for
# library(RoME)
wd <- tempdir()
suffix <- NA # paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
wd <-"D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\RoME_FR\\RoME\\Medits_Issue5"
TA <- read.csv(file = file.path(wd, "TA_GSA7.csv"), header = TRUE, sep = ";")
TA$OBSERVATIONS <- as.integer(TA$OBSERVATIONS)
TB <- read.csv(file = file.path(wd, "TB_GSA7.csv"), header = TRUE, sep = ";")
TC <- read.csv(file = file.path(wd, "TC_GSA7.csv"), header = TRUE, sep = ";")
TE <- read.csv(file = file.path(wd, "TE_GSA7.csv"), header = TRUE, sep = ";")
TE$MATURITY <- ifelse(is.na(TE$MATURITY) | TE$MATURITY=="ND", 0, TE$MATURITY)
TE$MATURITY <- as.integer(TE$MATURITY)
TL <- read.csv(file = file.path(wd, "TL_GSA7.csv"), header = TRUE, sep = ";")
# library(RoME)
wd <- tempdir()
suffix <- NA # paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year <- 2021
DataTE <- TE # RoME::TE # read.csv("~/GitHub/RoME/data/TE_2012-2018 _GSA18.csv", sep=";")
SPECIES <- NA
SEX <- NA
AREA <- NA
a <- NA
b <- NA
verbose <- FALSE
check_individual_weightTE(DataTE = TE, LW = ab_parameters, year, wd = wd, suffix = suffix, verbose = TRUE)
RoMEcc(wd=wd,
TA=TA,
TB=TB,
TC = TC,
TE = TE,
TL = TL,
verbose = TRUE)
library(RoME)
load("~/GitHub/RoME/data/assTL.rda")
assTL
#----------------------
write.table(assTL,"D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\assTL.csv",sep=";",row.names=FALSE)
assTL <- read.table("D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\assTL.csv", header=TRUE,sep=";")
colnames(assTL)
colnames(assTL) <- c("LITTER_CATEGORY",	"LITTER_SUB-CATEGORY")
save(assTL,file="data/assTL.rda",compress="xz",compression_level=9)
library(RoME)
library(RoME)
#install.packages("devtools")
library(devtools)
#install_github("COISPA/RoME")
library("RoME")
wd <-"D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\RoME_FR\\RoME\\Medits_Issue5"
TA <- read.csv(file = file.path(wd, "TA_GSA7.csv"), header = TRUE, sep = ";")
TA$OBSERVATIONS <- as.integer(TA$OBSERVATIONS)
TB <- read.csv(file = file.path(wd, "TB_GSA7.csv"), header = TRUE, sep = ";")
TC <- read.csv(file = file.path(wd, "TC_GSA7.csv"), header = TRUE, sep = ";")
TE <- read.csv(file = file.path(wd, "TE_GSA7.csv"), header = TRUE, sep = ";")
TE$MATURITY <- ifelse(is.na(TE$MATURITY) | TE$MATURITY=="ND", 0, TE$MATURITY)
TE$MATURITY <- as.integer(TE$MATURITY)
TL <- read.csv(file = file.path(wd, "TL_GSA7.csv"), header = TRUE, sep = ";")
RoMEcc(wd=wd,
TA=TA,
TB=TB,
TC = TC,
TE = TE,
TL = TL,
verbose = TRUE)
?devtools
devtools::build_manual(pkg = ".", path = NULL)
library(RoME)
devtools::build_manual(pkg = ".", path = NULL)
citation("dplyr")
citation("COSTeda")
citation("COSTcore")
citation("COSTdbe")
citation("COSTdbe")
citation("magrittr")
citation("methods")
citation("data.table")
citation("tidyr")
citation("lubridate")
citation("plyr")
citation("reshape2")
citation("rmarkdown")
citation("knitr")
citation("markdown ")
citation("markdown")
citation()
citation("Devtool ")
citation("Devtool")
citation("devtool")
citation("devtools")
setwd(~/GitHub/RoME/R)
setwd("~/GitHub/RoME/R")
list.files()
plot(RoME::MedSea)
class(RoME::MedSea)
plot(RoME::MedSea)
load("~/GitHub/RoME/data/LW.rda")
LW
