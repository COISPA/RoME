if ((ResultData$HAULING_DEPTH[j]>50) & (ResultData$HAULING_DEPTH[j]<=100)){
ResultData$stratum_e[j]="51-100"
} else {
if ((ResultData$HAULING_DEPTH[j]>100) & (ResultData$HAULING_DEPTH[j]<=200)){
ResultData$stratum_e[j]="101-200"
} else {
if ((ResultData$HAULING_DEPTH[j]>200) & (ResultData$HAULING_DEPTH[j]<=500)){
ResultData$stratum_e[j]="201-500"
} else {
if ((ResultData$HAULING_DEPTH[j]>500)){
ResultData$stratum_e[j]="501-800"
}
}
}
}
}
}
ResultData$stratum_e
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData$stratum_s <- NA
ResultData$stratum_e <- NA
i=3
for (i in 1:nrow(ResultData)){
if ((ResultData$SHOOTING_DEPTH[i]>=10) & (ResultData$SHOOTING_DEPTH[i]<=50)){
ResultData$stratum_s[i]="10-50"
} else if ((ResultData$SHOOTING_DEPTH[i]>50) & (ResultData$SHOOTING_DEPTH[i]<=100)){
ResultData$stratum_s[i]="51-100"
} else if ((ResultData$SHOOTING_DEPTH[i]>100) & (ResultData$SHOOTING_DEPTH[i]<=200)){
ResultData$stratum_s[i]="101-200"
} else if ((ResultData$SHOOTING_DEPTH[i]>200) & (ResultData$SHOOTING_DEPTH[i]<=500)){
ResultData$stratum_s[i]="201-500"
} else if (ResultData$SHOOTING_DEPTH[i]>=500 ){
ResultData$stratum_s[i]="501-800"
}
}
for (j in 1:nrow(ResultData)){
if ((ResultData$HAULING_DEPTH[j]>=10) & (ResultData$HAULING_DEPTH[j]<=50))
{ResultData$stratum_e[j]="10-50"
} else {
if ((ResultData$HAULING_DEPTH[j]>50) & (ResultData$HAULING_DEPTH[j]<=100)){
ResultData$stratum_e[j]="51-100"
} else {
if ((ResultData$HAULING_DEPTH[j]>100) & (ResultData$HAULING_DEPTH[j]<=200)){
ResultData$stratum_e[j]="101-200"
} else {
if ((ResultData$HAULING_DEPTH[j]>200) & (ResultData$HAULING_DEPTH[j]<=500)){
ResultData$stratum_e[j]="201-500"
} else {
if ((ResultData$HAULING_DEPTH[j]>500)){
ResultData$stratum_e[j]="501-800"
}
}
}
}
}
}
ResultData$stratum_e
for (k in 1:nrow(ResultData)){
if (ResultData$stratum_s[k]!= ResultData$stratum_e[k]){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)}
}
k
ResultData[57,]
(any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))))
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)}
numberError <- numberError + 1
}
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)}
numberError <- numberError + 1
} else  if (ResultData$stratum_s[k]!= ResultData$stratum_e[k]){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)}
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)}
numberError <- numberError + 1
} else  if (ResultData$stratum_s[k]!= ResultData$stratum_e[k]){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
} else  if (ResultData$stratum_s[k]!= ResultData$stratum_e[k]){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
}
wd
source("~/GitHub/RoME/R/check_stratum.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\TA_MEDITS_SVN_17_REV.csv",sep=";", header=TRUE)# RoME::TA
wd <- tempdir()
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2022
check_stratum(ResultData,year,wd,suffix)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\TA_MEDITS_SVN_17_REV.csv",sep=";", header=TRUE)# RoME::TA
wd <- tempdir()
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2022
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2022
check_stratum(ResultData,year,wd,suffix)
source("~/GitHub/RoME/R/check_stratum.r", echo=TRUE)
check_stratum(ResultData,year,wd,suffix)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\TA_MEDITS_SVN_17_REV.csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2022
check_stratum(ResultData,year,wd,suffix)
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultData <- ResultData[ResultData$YEAR == year, ]
#ResultData = read.csv(paste(Data,".csv",sep=""), sep=";", header=TRUE)
write(paste("\n----------- check start depth and end depth in the same stratum TA - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData$stratum_s <- NA
ResultData$stratum_e <- NA
i=3
for (i in 1:nrow(ResultData)){
if ((ResultData$SHOOTING_DEPTH[i]>=10) & (ResultData$SHOOTING_DEPTH[i]<=50)){
ResultData$stratum_s[i]="10-50"
} else if ((ResultData$SHOOTING_DEPTH[i]>50) & (ResultData$SHOOTING_DEPTH[i]<=100)){
ResultData$stratum_s[i]="51-100"
} else if ((ResultData$SHOOTING_DEPTH[i]>100) & (ResultData$SHOOTING_DEPTH[i]<=200)){
ResultData$stratum_s[i]="101-200"
} else if ((ResultData$SHOOTING_DEPTH[i]>200) & (ResultData$SHOOTING_DEPTH[i]<=500)){
ResultData$stratum_s[i]="201-500"
} else if (ResultData$SHOOTING_DEPTH[i]>=500 ){
ResultData$stratum_s[i]="501-800"
}
}
for (j in 1:nrow(ResultData)){
if ((ResultData$HAULING_DEPTH[j]>=10) & (ResultData$HAULING_DEPTH[j]<=50))
{ResultData$stratum_e[j]="10-50"
} else {
if ((ResultData$HAULING_DEPTH[j]>50) & (ResultData$HAULING_DEPTH[j]<=100)){
ResultData$stratum_e[j]="51-100"
} else {
if ((ResultData$HAULING_DEPTH[j]>100) & (ResultData$HAULING_DEPTH[j]<=200)){
ResultData$stratum_e[j]="101-200"
} else {
if ((ResultData$HAULING_DEPTH[j]>200) & (ResultData$HAULING_DEPTH[j]<=500)){
ResultData$stratum_e[j]="201-500"
} else {
if ((ResultData$HAULING_DEPTH[j]>500)){
ResultData$stratum_e[j]="501-800"
}
}
}
}
}
}
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
}
ResultData[452,]
nrow(ResultData)
source("~/GitHub/RoME/R/check_stratum.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\TA_MEDITS_SVN_17_REV.csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=1996
check_stratum(ResultData,year,wd,suffix)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\TA_MEDITS_SVN_17_REV.csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=1996
check_stratum(ResultData,year,wd,suffix)
stratification_scheme
stratification_scheme[stratification_scheme$COUNTRY=="BGR",]
unique(ResultData$AREA)[1]
GSA  <- unique(ResultData$AREA)[1]
strata <- stratification_scheme[stratification_scheme$GSA == GSA, ]
strata
ResultData$SHOOTING_DEPTH[i]
strata[strata$COUNTRY==ResultData$COUNTRY[i],"MIN_DEPTH"]
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"]
ResultData$COUNTRY[i]
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1]
strata[strata$COUNTRY==ResultData$COUNTRY[i]
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1]
for (i in 1:nrow(ResultData)){
if ((ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if ((ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if ((ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if ((ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if ((ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
for (j in 1:nrow(ResultData)){
if ((ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if ((ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if ((ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if ((ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if ((ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
ResultData$stratum_s
ResultData$stratum_s
(1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1]))
for (i in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
}
if ((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) ){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
}
ResultData$stratum_s
ResultData$stratum_s
ResultData$stratum_e
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="5"
}
}
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
}
if ((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) ){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
}
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\TA_MEDITS_SVN_17_REV.csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=1996
check_stratum(ResultData,year,wd,suffix)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
ResultData
year=2019
check_stratum(ResultData,year,wd,suffix)
stratification_scheme[stratification_scheme$COUNTRY="ROU",]
stratification_scheme[stratification_scheme$COUNTRY=="ROU",]
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultData <- ResultData[ResultData$YEAR == year, ]
#ResultData = read.csv(paste(Data,".csv",sep=""), sep=";", header=TRUE)
write(paste("\n----------- check start depth and end depth in the same stratum TA - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData$stratum_s <- NA
ResultData$stratum_e <- NA
GSA  <- unique(ResultData$AREA)[1]
strata <- stratification_scheme[stratification_scheme$GSA == GSA, ]
strata
i=1
strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1])
ResultData$SHOOTING_DEPTH[i]
strata[strata$COUNTRY==ResultData$COUNTRY[i]
& strata$CODE==1,"MIN_DEPTH"][1]
(ResultData$SHOOTING_DEPTH[i]
ResultData$SHOOTING_DEPTH[i]
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1]
(1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1]))
(2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1]))
ResultData$stratum_s[i]="2"
i=1
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
ResultData$stratum_s
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="5"
}
ResultData$stratum_e[i]
ResultData$stratum_e
k=1
(any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))))
((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) )
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
check_stratum(ResultData,year,wd,suffix)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultData <- ResultData[ResultData$YEAR == year, ]
#ResultData = read.csv(paste(Data,".csv",sep=""), sep=";", header=TRUE)
write(paste("\n----------- check start depth and end depth in the same stratum TA - ",ResultData$YEAR[1]), file = Errors, append = TRUE)
ResultData=ResultData[ResultData$VALIDITY=="V",]
ResultData$stratum_s <- NA
ResultData$stratum_e <- NA
GSA  <- unique(ResultData$AREA)[1]
strata <- stratification_scheme[stratification_scheme$GSA == GSA, ]
strata
i=1
1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
ResultData$COUNTRY[i]
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1])
ResultData$SHOOTING_DEPTH[i]
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])
2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"]
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1])
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])
strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1]
(
2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] &
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) &
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])
)
ResultData$stratum_s[i]="2"
for (i in 1:nrow(ResultData)){
if (
1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] &
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) &
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])
){
ResultData$stratum_s[i]="1"
} else if (
2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] &
(ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) &
(ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])
){
ResultData$stratum_s[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$SHOOTING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$SHOOTING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_s[i]="5"
}
}
ResultData$stratum_s
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[i],"CODE"] & (ResultData$HAULING_DEPTH[i]>= strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[i]<=strata[strata$COUNTRY==ResultData$COUNTRY[i] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[i]="5"
}
}
ResultData$stratum_e
for (j in 1:nrow(ResultData)){
if (1 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==1,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==1,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="1"
} else if (2 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==2,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==2,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="2"
} else if (3 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==3,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==3,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="3"
} else if (4 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==4,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==4,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="4"
} else if (5 %in% strata[strata$COUNTRY==ResultData$COUNTRY[j],"CODE"] & (ResultData$HAULING_DEPTH[j]>= strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==5,"MIN_DEPTH"][1]) & (ResultData$HAULING_DEPTH[j]<=strata[strata$COUNTRY==ResultData$COUNTRY[j] & strata$CODE==5,"MAX_DEPTH"][1])){
ResultData$stratum_e[j]="5"
}
}
ResultData$stratum_e
k=1
for (k in 1:nrow(ResultData)){
if (any(is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k])))){
write(paste("Error: Haul",ResultData$HAUL_NUMBER[k]," one between SHOOTING_DEPTH or HAULING_DEPTH is out of the stratification range"), file = Errors, append = TRUE)
numberError <- numberError + 1
}
if ((ResultData$stratum_s[k]!= ResultData$stratum_e[k]) & all(!is.na(c(ResultData$stratum_s[k],ResultData$stratum_e[k]))) ){
write(paste("Warning: Haul",ResultData$HAUL_NUMBER[k]," starts in the stratum",ResultData$stratum_s[k],"(",ResultData$SHOOTING_DEPTH[k],"m ) and finishes in the stratum", ResultData$stratum_e[k],"(",ResultData$HAULING_DEPTH[k],"m ) in",ResultData$TYPE_OF_FILE[k]), file = Errors, append = TRUE)
}
}
source("~/GitHub/RoME/R/check_stratum_BS.r", echo=TRUE)
ResultData = read.table("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=";", header=TRUE)# RoME::TA
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
year=2019
check_stratum(ResultData,year,wd,suffix)
library(RoME)
RoME::TM_list
View(RoME::TM_list)
View(RoMEBS::TM_list)
