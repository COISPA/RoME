if (h==0){
time=minutes
} else {
time <- as.integer(c(t,ht))
}
}
h
as.integer(paste(h, minutes,sep=""))
ht <- as.integer(paste(h, minutes,sep=""))
as.integer(c(t,ht))
time <- as.integer(c(time,ht))
time
h=0
for (h in 0:23) {
ht <- as.integer(paste(h, minutes,sep=""))
if (h==0){
time=minutes
} else {
time <- as.integer(c(time,ht))
}
}
time
minutes <- c("00","01","02","03","04","05","06","07","08","09", as.character(seq(10,59,1)))
h=0
for (h in 0:23) {
ht <- as.integer(paste(h, minutes,sep=""))
if (h==0){
time=minutes
} else {
time <- as.integer(c(time,ht))
}
}
time
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
library(RoME)
library(data.table)
# Set working directory were all the results will be stored
setwd("D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS")
resdir <- getwd()
filedir <- getwd()
GSA <- 23
# years <- c(1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2008, 2014, 2016, 2018, 2019, 2020, 2022)
SP <- c("MULLSUR")
# # load TX tables for a unique GSA per time
ta <- fread(file.path(filedir,"TA_MEDITS_HANDBOOK.csv"), stringsAsFactors = F)
tb <- fread(file.path(filedir,"TB_MEDITS_HANDBOOK.csv"), stringsAsFactors = F)
tc <- fread(file.path(filedir,"TC_MEDITS_HANDBOOK.csv"), stringsAsFactors = F)
te <- NA
tl <- NA
ta <- ta[ta$AREA%in%GSA, ]
tb <- tb[tb$AREA%in%GSA & paste0(tb$GENUS,tb$SPECIES) %in% SP, ]
tc <- tc[tc$AREA%in%GSA & paste0(tc$GENUS,tc$SPECIES) %in% SP, ]
years <- c(Reduce(intersect, list(sort(unique(ta$YEAR)),sort(unique(tb$YEAR)),sort(unique(tc$YEAR)))))
years <- as.integer(years)
outersect <- function(x,y,z) {
sort(c(x[!x%in%y],
x[!x%in%z]))
}
notyears <- outersect(sort(unique(ta$YEAR)),sort(unique(tb$YEAR)),sort(unique(tc$YEAR)))
ta <- ta[ta$YEAR%in%years, ]
tb <- tb[tb$YEAR%in%years, ]
tc <- tc[tc$YEAR%in%years, ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
RoMEcc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=TM_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity_parameters,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
ta
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
GSA <- 23
years <- c(2019,2022)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(wd, "\\ROU_Med&BS_MEDITS_TB.csv",sep=""), sep=",", header=T)
tc <- read.table(file=paste(wd, "\\ROU_Med&BS_MEDITS_TC.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
RoME::stratification_scheme
stratification_scheme[stratification_scheme$COUNTRY=="ROU", ]
TA
library(RoME)
## RoME package needs TA, TB and TC mandatory files to work. In case TE and TL are not provided TE and TL should be NA.
## change the following lines to load TX table data from local folder
## Comment the following lines if TX file are loaded on the fly from RDBFIS
# Set working directory were all the results will be stored
resdir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
# filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\20231003_20231005_Task 4 - training workshop\\RoME\\RoME test data\\no errors"
filedir <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
GSA <- 29
years <- c(2019,2022)
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
suffix=NA  # non modificare
ta <- read.table(file=paste(wd, "\\ROU_Med&BS_MEDITS_TA(rev).csv",sep=""), sep=",", header=T)
tb <- read.table(file=paste(wd, "\\ROU_Med&BS_MEDITS_TB.csv",sep=""), sep=",", header=T)
tc <- read.table(file=paste(wd, "\\ROU_Med&BS_MEDITS_TC.csv",sep=""), sep=",", header=T)
te <- NA # read.table(file=paste(wd, "\\TE_GSA8.csv",sep=""), sep=";", header=T) # puoi mettere NA
tl <- NA #read.table(file=paste(wd,"\\TL_GSA8.csv",sep=""), sep=";", header=T) #
# conversion of RDBFIS headers of MEDITS tables to MEDITS format
ta <- ta[ta$AREA==GSA & ta$YEAR %in% years , ]
tb <- tb[tb$AREA==GSA & tb$YEAR %in% years , ]
tc <- tc[tc$AREA==GSA & tc$YEAR %in% years , ]
if ((all(is.na(te)) & length(te)==1) | (all(is.na(te))))
{
te <- NA
} else {
te <- te[te$AREA==GSA & te$YEAR %in% years, ]
}
if ((all(is.na(tl)) & length(tl)==1) | (all(is.na(tl)) ))
{
tl <- NA
} else {
tl <- tl[tl$AREA==GSA & tl$YEAR %in% years, ]
}
# te[1,"LENGTH_CLASS"] <- NA
# variables definition
suffix <- NA
Stratification= RoME::stratification_scheme
Ref_list= RoME::TM_list
DataTargetSpecies=RoME::DataTargetSpecies
Maturity=RoME::Maturity_parameters
ab_parameters=RoME::LW
stages_list=RoME::mat_stages
assTL=RoME::assTL
verbose = TRUE
zip=FALSE
################ NON MODIFICARE #############
RoMEBScc(TA=ta,
TB=tb,
TC=tc,
TE=te,
TL=tl,
wd=resdir,
suffix=suffix,
verbose=verbose,
Stratification=Stratification,
Ref_list=Ref_list,
DataTargetSpecies=DataTargetSpecies,
Maturity=Maturity,
ab_parameters=ab_parameters,
stages_list=stages_list,
assTL=assTL,
zip=zip)
ResultDataTA = ta # RoME::TA
year=2019
wd <- tempdir()
suffix= NA
# # load TX tables for a unique GSA per time
wd <- "D:\\OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L\\QualiTrain\\Task 2\\Data\\MEDITS"
Format="from_2012"
if (!file.exists(file.path(wd, "Logfiles"))){
dir.create(file.path(wd, "Logfiles"), recursive = TRUE, showWarnings = FALSE)
}
if (!exists("suffix")){
suffix=paste(as.character(Sys.Date()),format(Sys.time(), "_time_h%Hm%Ms%OS0"),sep="")
}
numberError = 0
Errors <- file.path(wd,"Logfiles",paste("Logfile_",suffix,".dat",sep=""))
if (!file.exists(Errors)){
file.create(Errors)
}
### FILTERING DATA FOR THE SELECTED YEAR
arg <- "year"
if (!exists(arg)) {
stop(paste0("'", arg, "' argument should be provided"))
} else if (length(year) != 1) {
stop(paste0("only one value should be provided for '", arg, "' argument"))
} else if (is.na(year)) {
stop(paste0(arg, " argument should be a numeric value"))
}
ResultDataTA <- ResultDataTA[ResultDataTA$YEAR == year, ]
########################################
ResultDataTA <- ResultDataTA[!is.na(ResultDataTA$AREA), ]
ResultDataTA
stratification_scheme
stratification_scheme[stratification_scheme$COUNTRY=="ROU",]
Dataset = ResultDataTA #read.csv(paste(DataTA,".csv",sep=""), sep=";",header=TRUE)
write(paste("\n----------- check correctness of stratum code - ",Dataset$YEAR[1]), file = Errors, append = TRUE)
Strat_table = Strata
Strat_table = Strat_table[Strat_table$GSA== Dataset$AREA[1],] # selection of the area
strata.no.letter <- Strat_table
strata.no.letter$STRATUM <- as.character(strata.no.letter$STRATUM)
for (n in 1:nrow(Strat_table)){
strata.no.letter$STRATUM[n] <- substr( strata.no.letter$STRATUM[n] , 1 , (nchar(strata.no.letter$STRATUM[n])-1) )
}
strata.no.letter$STRATUM
Strata=RoME::stratification_scheme
Strat_table = Strata
Strat_table = Strat_table[Strat_table$GSA== Dataset$AREA[1],] # selection of the area
strata.no.letter <- Strat_table
strata.no.letter$STRATUM <- as.character(strata.no.letter$STRATUM)
for (n in 1:nrow(Strat_table)){
strata.no.letter$STRATUM[n] <- substr( strata.no.letter$STRATUM[n] , 1 , (nchar(strata.no.letter$STRATUM[n])-1) )
}
strata.no.letter$STRATUM
Strat_table$STRATUM
(!(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(Strat_table$STRATUM)) & !(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(strata.no.letter$STRATUM)))
Dataset$NUMBER_OF_THE_STRATUM[i]
Dataset
i=1
Dataset$NUMBER_OF_THE_STRATUM[i]
(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(Strat_table$STRATUM)
(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(Strat_table$STRATUM))
(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(strata.no.letter$STRATUM))
Dataset$NUMBER_OF_THE_STRATUM[i]
as.character(strata.no.letter$STRATUM)
(!(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(Strat_table$STRATUM)) & !(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(strata.no.letter$STRATUM)))
Strat_table[Strat_table$CODE==1,]
Strat_table
Strat_table = Strata
Strat_table = Strat_table[Strat_table$GSA== Dataset$AREA[1],] # selection of the area
Strat_table
row <- Dataset[i,]
row
row$COUNTRY
gsa <- row$AREA
depth <- mean_depth[i]
mean_depth = rowMeans(cbind(Dataset$SHOOTING_DEPTH,Dataset$HAULING_DEPTH), na.rm = TRUE)
depth <- mean_depth[i]
stratum <- row$NUMBER_OF_THE_STRATUM
stratum
Strat_table
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
row <- Dataset[i,]
country <- row$COUNTRY
gsa <- row$AREA
depth <- mean_depth[i]
stratum <- row$NUMBER_OF_THE_STRATUM
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
tab
tab[which(stratum %in% tab$STRATUM), "CODE"]
tab[which(stratum %in% tab$STRATUM), "CODE"]
row2 <- tab[which(stratum %in% tab$STRATUM), ]
depth
((depth > row2$MIN_DEPTH) & (depth <= row2$MAX_DEPTH))
row$HAUL_NUMBER
write(paste("Warning: Haul ",row$HAUL_NUMBER[1],", stratum code (",row$NUMBER_OF_THE_STRATUM[1],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
for (i in 1:nrow(Dataset))
{
# check if the stratum code in TA is one of the codes in the Stratification table
# if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(Strat_table$STRATUM)) & !(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(strata.no.letter$STRATUM))) {
#   numberError = numberError+1
#   write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", wrong stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],"), check the most recent version of MEDITS codes"), file = Errors, append = TRUE)
#   }
#
#
# if ((mean_depth[i] >=10) & (mean_depth[i] <=50)) {
#   Strat_table_temp = Strat_table[Strat_table$CODE==1,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==1, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM) | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#   write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# }  else if ((mean_depth[i] >50) & (mean_depth[i] <=100)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==2,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==2, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM) | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >100) & (mean_depth[i] <=200)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==3,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==3, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >200) & (mean_depth[i] <=500)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==4,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==4, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% (Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >500) & (mean_depth[i] <=800)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==5,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==5, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# }
row <- Dataset[i,]
country <- row$COUNTRY
gsa <- row$AREA
depth <- mean_depth[i]
stratum <- row$NUMBER_OF_THE_STRATUM
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
if (!stratum %in% tab$STRATUM | nrow(tab)== 0) {
numberError = numberError+1
write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", wrong stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],"), check the most recent version of MEDITS codes"), file = Errors, append = TRUE)
} else {
row2 <- tab[which(stratum %in% tab$STRATUM), ]
if ((depth > row2$MIN_DEPTH) & (depth <= row2$MAX_DEPTH)) {
write(paste("Warning: Haul ",row$HAUL_NUMBER[1],", stratum code (",row$NUMBER_OF_THE_STRATUM[1],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
}
}
}
i=16
row <- Dataset[i,]
country <- row$COUNTRY
gsa <- row$AREA
depth <- mean_depth[i]
stratum <- row$NUMBER_OF_THE_STRATUM
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
depth
stratum
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
tab
depth > row2$MIN_DEPTH
depth <= row2$MAX_DEPTH
for (i in 1:nrow(Dataset))
{
# check if the stratum code in TA is one of the codes in the Stratification table
# if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(Strat_table$STRATUM)) & !(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(strata.no.letter$STRATUM))) {
#   numberError = numberError+1
#   write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", wrong stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],"), check the most recent version of MEDITS codes"), file = Errors, append = TRUE)
#   }
#
#
# if ((mean_depth[i] >=10) & (mean_depth[i] <=50)) {
#   Strat_table_temp = Strat_table[Strat_table$CODE==1,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==1, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM) | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#   write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# }  else if ((mean_depth[i] >50) & (mean_depth[i] <=100)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==2,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==2, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM) | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >100) & (mean_depth[i] <=200)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==3,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==3, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >200) & (mean_depth[i] <=500)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==4,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==4, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% (Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >500) & (mean_depth[i] <=800)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==5,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==5, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# }
row <- Dataset[i,]
country <- row$COUNTRY
gsa <- row$AREA
depth <- mean_depth[i]
stratum <- row$NUMBER_OF_THE_STRATUM
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
if (!stratum %in% tab$STRATUM | nrow(tab)== 0) {
numberError = numberError+1
write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", wrong stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],"), check the most recent version of MEDITS codes"), file = Errors, append = TRUE)
} else {
row2 <- tab[which(stratum %in% tab$STRATUM), ]
if (!((depth > row2$MIN_DEPTH) & (depth <= row2$MAX_DEPTH))) {
write(paste("Warning: Haul ",row$HAUL_NUMBER[1],", stratum code (",row$NUMBER_OF_THE_STRATUM[1],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
}
}
}
i=1
row <- Dataset[i,]
country <- row$COUNTRY
gsa <- row$AREA
depth <- mean_depth[i]
stratum <- row$NUMBER_OF_THE_STRATUM
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
row
country
gsa
depth
stratum
tab
(!stratum %in% tab$STRATUM | nrow(tab)== 0)
row2 <- tab[which(stratum %in% tab$STRATUM), ]
row2
stratum
tab$STRATUM
stratum
which(stratum == tab$STRATUM)
tab[which(stratum == tab$STRATUM), ]
tab$STRATUM
row2 <- tab[which(stratum == tab$STRATUM), ]
if (!((depth > row2$MIN_DEPTH) & (depth <= row2$MAX_DEPTH))) {
write(paste("Warning: Haul ",row$HAUL_NUMBER[1],", stratum code (",row$NUMBER_OF_THE_STRATUM[1],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
}
{
# check if the stratum code in TA is one of the codes in the Stratification table
# if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(Strat_table$STRATUM)) & !(Dataset$NUMBER_OF_THE_STRATUM[i] %in%  as.character(strata.no.letter$STRATUM))) {
#   numberError = numberError+1
#   write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", wrong stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],"), check the most recent version of MEDITS codes"), file = Errors, append = TRUE)
#   }
#
#
# if ((mean_depth[i] >=10) & (mean_depth[i] <=50)) {
#   Strat_table_temp = Strat_table[Strat_table$CODE==1,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==1, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM) | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#   write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# }  else if ((mean_depth[i] >50) & (mean_depth[i] <=100)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==2,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==2, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM) | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >100) & (mean_depth[i] <=200)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==3,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==3, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >200) & (mean_depth[i] <=500)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==4,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==4, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% (Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# } else if ((mean_depth[i] >500) & (mean_depth[i] <=800)){
#   Strat_table_temp = Strat_table[Strat_table$CODE==5,]
#   Strat_table_temp.no.lettera = strata.no.letter[strata.no.letter$CODE ==5, ]
#   if (!(Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp$STRATUM)  | Dataset$NUMBER_OF_THE_STRATUM[i] %in% as.character(Strat_table_temp.no.lettera$STRATUM)  )){
#     write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
#   }
# }
row <- Dataset[i,]
country <- row$COUNTRY
gsa <- row$AREA
depth <- mean_depth[i]
stratum <- row$NUMBER_OF_THE_STRATUM
tab <- Strat_table[Strat_table$GSA ==gsa & Strat_table$COUNTRY==country, ]
if (!stratum %in% tab$STRATUM | nrow(tab)== 0) {
numberError = numberError+1
write(paste("Warning: Haul ",Dataset$HAUL_NUMBER[i],", wrong stratum code (",Dataset$NUMBER_OF_THE_STRATUM[i],"), check the most recent version of MEDITS codes"), file = Errors, append = TRUE)
} else {
row2 <- tab[which(stratum == tab$STRATUM), ]
if (!((depth > row2$MIN_DEPTH) & (depth <= row2$MAX_DEPTH))) {
write(paste("Warning: Haul ",row$HAUL_NUMBER[1],", stratum code (",row$NUMBER_OF_THE_STRATUM[1],") not consistent with the mean detph of the haul"), file = Errors, append = TRUE)
}
}
}
mean_depth[i]
source("~/GitHub/RoME/R/check_stratum_code.r", echo=TRUE)
ResultDataTA$NUMBER_OF_THE_STRATUM[1] <- "pippo"
# wd <- tempdir()
suffix= NA
check_stratum_code(ResultDataTA,year,Strata=RoME::stratification_scheme,wd,suffix)
library(RoME)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/20231003_20231005_Task 4 - training workshop/RoME/Test_RoMEcc.R", echo=TRUE)
source("D:/OneDrive - Coispa Tecnologia & Ricerca S.C.A.R.L/QualiTrain/Task 2/Test_RoMEcc_revAM.R", echo=TRUE)
RoME::stratification_scheme
RoME::stratification_scheme[RoME::stratification_scheme$GSA==25,]
load("~/GitHub/RoME/data/mat_stages.rda")
mat_stages
stratification_scheme <- RoME::stratification_scheme
write.table(RoME::stratification_scheme,"D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\stratification_scheme.csv",sep=";",row.names=FALSE)
stratification_scheme <-  read.table("D:\\Documents and Settings\\Utente\\Documenti\\GitHub\\RoME_appoggio\\data\\stratification_scheme.csv",sep=";",header=TRUE)
stratification_scheme[stratification_scheme$GSA==25,]
setwd("~/GitHub/RoME")
save(stratification_scheme,file="data/stratification_scheme.rda",compress="xz",compression_level=9)
library(RoME)
library(RoME)
library(RoME)
library(RoME)
